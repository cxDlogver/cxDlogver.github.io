<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MYVUE3-2025-07-23</title>
    <link href="/2025/07/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/MYVUE3-2025-07-23/"/>
    <url>/2025/07/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/MYVUE3-2025-07-23/</url>
    
    <content type="html"><![CDATA[<p>本项目基于【尚硅谷-硅谷甄选】项目复现学习VUE3和TypeScript。</p><span id="more"></span><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MYVUE3项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2025/06/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/text/"/>
    <url>/2025/06/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/text/</url>
    
    <content type="html"><![CDATA[<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/25/VUE3%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/10/25/VUE3%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3学习记录"><a href="#Vue3学习记录" class="headerlink" title="Vue3学习记录"></a>Vue3学习记录</h1><p><strong>视频</strong></p><ul><li>[1] <a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">尚硅谷Vue2.0+Vue3.0全套教程</a></li><li>[2] <a href="https://www.bilibili.com/video/BV1Za4y1r7KE">尚硅谷Vue3入门到实战</a></li></ul><p><strong>笔记</strong></p><ul><li>[1] vue3快速上手1.pdf</li><li>[2] vue3快速上手2.pdf</li></ul><h2 id="创建Vue3项目"><a href="#创建Vue3项目" class="headerlink" title="创建Vue3项目"></a>创建Vue3项目</h2><blockquote><p>[1] P136-P141节</p><p>[2] P1-P10节</p></blockquote><p><strong>学习目标：</strong></p><ol><li>如何用vue-cli搭建一个vue3项目。</li><li>如何用vite搭建一个vue3项目。</li><li>vue3项目工程结构分析。</li><li>OptionsAPI和CompositionAPI的区别。</li><li><code>setup</code>的使用方法。（执行时间；返回值； <code>setup</code>和<code>data</code>，<code>methods</code>同时存在时怎么办；语法糖）</li></ol><h2 id="Vue3的响应式布局"><a href="#Vue3的响应式布局" class="headerlink" title="Vue3的响应式布局"></a>Vue3的响应式布局</h2><blockquote><p>[1] P141-P149节</p><p>[2] P1-P15节</p></blockquote><p><strong>学习目标：</strong></p><ol><li><p><code>ref</code>函数处理基础数据和响应式数据。<br>基于<code>defaultProperty</code>函数，只绑定和监听一个属性<code>value</code>。<br>还是基于数据代理和数据劫持。处理响应式数据时本质还是<code>reactive</code></p></li><li><p><code>reactive</code>函数处理响应式数据。<br>基于<code>Proxy</code>代理函数。没有数据代理部分。</p><p><code>Object.assign</code>复制对象</p></li><li><p>回顾Vue2响应式处理。<br>数据代理和数据劫持的模拟。</p></li><li><p>Vue3响应式处理原理（Proxy，Reflect）。</p></li><li><p><code>toRefs</code>和<code>toRef</code>。</p></li><li><p><code>setup</code>的参数，（props，slots，emits）</p></li></ol><h2 id="Vue3路由管理"><a href="#Vue3路由管理" class="headerlink" title="Vue3路由管理"></a>Vue3路由管理</h2><p><strong>学习目标：</strong></p><ol><li>route中常用配置项（<code>path\fullPath\meta\params\query\matched</code>）</li></ol><h1 id="学习历程"><a href="#学习历程" class="headerlink" title="学习历程"></a>学习历程</h1><h2 id="2024-11-09"><a href="#2024-11-09" class="headerlink" title="2024-11-09"></a>2024-11-09</h2><ol><li><h3 id="eslint-config-js文件的作用。"><a href="#eslint-config-js文件的作用。" class="headerlink" title="eslint.config.js文件的作用。"></a>eslint.config.js文件的作用。</h3></li></ol><blockquote><p><code>eslint.config.js</code> 文件用于配置 ESLint，即 JavaScript 和 TypeScript 项目的代码质量和样式检查工具。通过此文件，我们可以自定义 ESLint 规则，比如允许或禁止某种代码写法。</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>以下是一个典型的 <code>eslint.config.js</code> 文件结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 指定运行环境，支持的环境有 &#x27;browser&#x27;, &#x27;node&#x27;, &#x27;es2021&#x27; 等</span><br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">es2021</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <br>  <span class="hljs-comment">// 继承的配置。可以使用多个标准配置，也可以用 `.eslintrc` 中的自定义配置</span><br>  <span class="hljs-attr">extends</span>: [<br>    <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>, <span class="hljs-comment">// 推荐的 ESLint 配置</span><br>    <span class="hljs-string">&#x27;plugin:vue/vue3-recommended&#x27;</span>, <span class="hljs-comment">// Vue 3 的推荐配置（适用于 Vue 项目）</span><br>    <span class="hljs-string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span> <span class="hljs-comment">// TypeScript 项目的推荐配置</span><br>  ],<br>  <br>  <span class="hljs-comment">// 设置解析器，TypeScript 项目一般使用 &#x27;@typescript-eslint/parser&#x27;</span><br>  <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>  <br>  <span class="hljs-comment">// 配置解析器选项，如 ECMA 版本和模块类型</span><br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-number">2021</span>,<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;,<br>  <br>  <span class="hljs-comment">// 自定义 ESLint 规则，启用或禁用特定检查项</span><br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;no-console&#x27;</span>: <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-comment">// console.log 警告而非错误</span><br>    <span class="hljs-string">&#x27;no-debugger&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-comment">// debugger 语句引发错误</span><br>    <span class="hljs-string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-comment">// 关闭多单词组件名称检查</span><br>    <span class="hljs-string">&#x27;@typescript-eslint/no-unused-vars&#x27;</span>: <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-comment">// 未使用的变量引发警告</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="主要配置项说明"><a href="#主要配置项说明" class="headerlink" title="主要配置项说明"></a>主要配置项说明</h3><ul><li><strong>env</strong>：配置环境，告诉 ESLint 代码在哪些环境下运行，比如浏览器、Node.js 等。这样 ESLint 会自动识别对应的全局变量（如 <code>window</code>、<code>process</code>）。</li><li><strong>extends</strong>：继承已有的规则集，可以引入标准或插件提供的规则，比如 <code>eslint:recommended</code>（ESLint 的推荐规则）。</li><li><strong>parser</strong>：指定解析器，默认是 <code>espree</code>。在 TypeScript 项目中，应改为 <code>@typescript-eslint/parser</code>。</li><li><strong>parserOptions</strong>：解析器的选项，比如 ES 版本、模块类型等。</li><li><strong>rules</strong>：自定义规则，通过 <code>&#39;规则名&#39;: &#39;off&#39; | &#39;warn&#39; | &#39;error&#39;</code> 设置禁用、警告、或错误级别。规则可以使用字符串或数字形式设置级别，分别代表 <code>&#39;off&#39; = 0</code>、<code>&#39;warn&#39; = 1</code>、<code>&#39;error&#39; = 2</code>。</li></ul><h3 id="示例：关闭组件名称的多单词检查"><a href="#示例：关闭组件名称的多单词检查" class="headerlink" title="示例：关闭组件名称的多单词检查"></a>示例：关闭组件名称的多单词检查</h3><p>你提到想关闭 “组件名称必须多单词” 的检查。这可以通过在 <code>rules</code> 中添加以下配置实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">rules</span>: &#123;<br>  <span class="hljs-string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-comment">// 允许单个单词的组件名</span><br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="常见配置的扩展"><a href="#常见配置的扩展" class="headerlink" title="常见配置的扩展"></a>常见配置的扩展</h3><ol><li><p><strong>支持 TypeScript</strong>： 安装插件：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin<br></code></pre></td></tr></table></figure><p>然后添加到 <code>extends</code> 和 <code>parser</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>],<br><span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br></code></pre></td></tr></table></figure></li><li><p><strong>在 CI 中使用更严格的规则</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">rules</span>: &#123;<br>  <span class="hljs-string">&#x27;no-console&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-comment">// 在 CI 环境中禁用 console.log</span><br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>与 Prettier 配合</strong>：安装 <code>eslint-config-prettier</code> 以解决与 Prettier 冲突。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;plugin:prettier/recommended&#x27;</span>], <span class="hljs-comment">// 配合 Prettier</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="保存并自动修复"><a href="#保存并自动修复" class="headerlink" title="保存并自动修复"></a>保存并自动修复</h3><p>可以在编辑器中配置自动修复 ESLint 问题，或运行命令行工具：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx eslint --fix .<br></code></pre></td></tr></table></figure><p>这样，<code>eslint.config.js</code> 便可用于定制化的 ESLint 规则检查，确保代码的风格一致和质量高。</p></blockquote><ol start="2"><li><h3 id="scss安装"><a href="#scss安装" class="headerlink" title="scss安装"></a>scss安装</h3></li></ol><blockquote></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础知识</title>
    <link href="/2024/09/26/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/09/26/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Java的基础用法"><a href="#Java的基础用法" class="headerlink" title="Java的基础用法"></a>Java的基础用法</h1><h2 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h2><table><thead><tr><th>操作</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>输出</strong></td><td><code>System.out.println()</code></td><td>输出内容并换行</td></tr><tr><td></td><td><code>System.out.print()</code></td><td>输出内容但不换行</td></tr><tr><td></td><td><code>System.out.printf()</code></td><td>格式化输出</td></tr><tr><td><strong>输入</strong></td><td><code>Scanner scanner = new Scanner(System.in);</code></td><td>创建输入扫描器</td></tr><tr><td></td><td><code>scanner.nextLine()</code></td><td>读取一行文本</td></tr><tr><td></td><td><code>scanner.next()</code></td><td>读取下一个单词</td></tr><tr><td></td><td><code>scanner.nextInt()</code></td><td>读取整数</td></tr><tr><td></td><td><code>scanner.nextDouble()</code></td><td>读取双精度浮点数</td></tr><tr><td></td><td><code>scanner.nextFloat()</code></td><td>读取单精度浮点数</td></tr><tr><td></td><td><code>scanner.nextBoolean()</code></td><td>读取布尔值</td></tr><tr><td></td><td><code>scanner.nextLong()</code></td><td>读取长整型数</td></tr><tr><td></td><td><code>scanner.nextShort()</code></td><td>读取短整型数</td></tr></tbody></table><h2 id="Map键值对"><a href="#Map键值对" class="headerlink" title="Map键值对"></a>Map键值对</h2><p>以下是Java中<code>Map</code>常见用法的表格总结：</p><table><thead><tr><th>操作</th><th>方法&#x2F;示例</th><th>描述</th></tr></thead><tbody><tr><td><strong>创建 Map</strong></td><td><code>Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</code></td><td>创建一个 HashMap</td></tr><tr><td><strong>添加元素</strong></td><td><code>map.put(&quot;apple&quot;, 1);</code></td><td>添加键值对 “apple” -&gt; 1</td></tr><tr><td><strong>获取元素</strong></td><td><code>int value = map.get(&quot;apple&quot;);</code></td><td>获取键为 “apple” 的值</td></tr><tr><td><strong>检查键</strong></td><td><code>boolean hasKey = map.containsKey(&quot;banana&quot;);</code></td><td>检查是否包含键 “banana”</td></tr><tr><td><strong>检查值</strong></td><td><code>boolean hasValue = map.containsValue(2);</code></td><td>检查是否包含值 2</td></tr><tr><td><strong>删除元素</strong></td><td><code>map.remove(&quot;banana&quot;);</code></td><td>删除键为 “banana” 的键值对</td></tr><tr><td><strong>遍历 Map</strong></td><td><code>for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123; ... &#125;</code></td><td>遍历所有键值对</td></tr><tr><td></td><td><code>for (String key : map.keySet()) &#123; ... &#125;</code></td><td>遍历所有键</td></tr><tr><td></td><td><code>for (Integer value : map.values()) &#123; ... &#125;</code></td><td>遍历所有值</td></tr><tr><td><strong>清空 Map</strong></td><td><code>map.clear();</code></td><td>清空所有键值对</td></tr><tr><td><strong>获取大小</strong></td><td><code>int size = map.size();</code></td><td>获取 Map 中的键值对数量</td></tr><tr><td><strong>有序 Map</strong></td><td><code>Map&lt;String, Integer&gt; treeMap = new TreeMap&lt;&gt;();</code></td><td>创建一个有序 TreeMap</td></tr><tr><td></td><td><code>Map&lt;String, Integer&gt; linkedHashMap = new LinkedHashMap&lt;&gt;();</code></td><td>创建一个保持插入顺序的 LinkedHashMap</td></tr></tbody></table><p><strong>三种子类Map</strong></p><table><thead><tr><th>类名</th><th>顺序</th><th>时间复杂度</th><th>允许 null 键</th><th>线程安全</th></tr></thead><tbody><tr><td><strong>HashMap</strong></td><td>不保证顺序</td><td>O(1)</td><td>允许</td><td>不安全</td></tr><tr><td><strong>TreeMap</strong></td><td>有序</td><td>O(log n)</td><td>不允许 null 键</td><td>不安全</td></tr><tr><td><strong>LinkedHashMap</strong></td><td>保持插入顺序</td><td>O(1)</td><td>允许</td><td>不安全</td></tr></tbody></table><h2 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h2><p>在Java中，<code>List</code> 接口的常用实现类是 <code>ArrayList</code> 和 <code>LinkedList</code>。以下是一些常用的 <code>List</code> 方法及其用途：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>add(E element)</code></td><td>在列表末尾添加元素。</td></tr><tr><td><code>add(int index, E element)</code></td><td>在指定位置插入元素。</td></tr><tr><td><code>get(int index)</code></td><td>获取指定位置的元素。</td></tr><tr><td><code>set(int index, E element)</code></td><td>替换指定位置的元素。</td></tr><tr><td><code>remove(int index)</code></td><td>移除指定位置的元素，并返回被移除的元素。</td></tr><tr><td><code>remove(Object o)</code></td><td>移除首次出现的指定元素。</td></tr><tr><td><code>size()</code></td><td>返回列表中元素的数量。</td></tr><tr><td><code>isEmpty()</code></td><td>判断列表是否为空。</td></tr><tr><td><code>contains(Object o)</code></td><td>判断列表是否包含指定元素。</td></tr><tr><td><code>indexOf(Object o)</code></td><td>返回指定元素在列表中首次出现的位置。</td></tr><tr><td><code>lastIndexOf(Object o)</code></td><td>返回指定元素在列表中最后一次出现的位置。</td></tr><tr><td><code>clear()</code></td><td>移除列表中的所有元素。</td></tr><tr><td><code>subList(int fromIndex, int toIndex)</code></td><td>返回列表中指定范围的子列表。</td></tr><tr><td><code>toArray()</code></td><td>将列表转换为数组。</td></tr><tr><td><code>iterator()</code></td><td>返回列表元素的迭代器。</td></tr><tr><td><code>forEach(Consumer&lt;? super E&gt; action)</code></td><td>使用指定的操作对每个元素执行一次。</td></tr></tbody></table><h2 id="String字符串方法"><a href="#String字符串方法" class="headerlink" title="String字符串方法"></a>String字符串方法</h2><p>在Java中，<code>String</code> 类提供了多种常用的方法来处理字符串。以下是一些常见的字符串方法及其用途：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>length()</code></td><td>返回字符串的长度（字符数）。</td></tr><tr><td><code>charAt(int index)</code></td><td>返回指定位置的字符。</td></tr><tr><td><code>substring(int beginIndex)</code></td><td>返回从指定索引到字符串末尾的子字符串。</td></tr><tr><td><code>substring(int beginIndex, int endIndex)</code></td><td>返回从 <code>beginIndex</code> 到 <code>endIndex</code> 的子字符串。</td></tr><tr><td><code>indexOf(String str)</code></td><td>返回子字符串 <code>str</code> 在字符串中首次出现的位置。</td></tr><tr><td><code>lastIndexOf(String str)</code></td><td>返回子字符串 <code>str</code> 在字符串中最后出现的位置。</td></tr><tr><td><code>equals(Object anObject)</code></td><td>判断字符串内容是否相等。</td></tr><tr><td><code>equalsIgnoreCase(String anotherString)</code></td><td>忽略大小写判断字符串内容是否相等。</td></tr><tr><td><code>toLowerCase()</code></td><td>返回一个所有字符均为小写的新字符串。</td></tr><tr><td><code>toUpperCase()</code></td><td>返回一个所有字符均为大写的新字符串。</td></tr><tr><td><code>trim()</code></td><td>返回去除前后空格的新字符串。</td></tr><tr><td><code>split(String regex)</code></td><td>根据正则表达式分割字符串，并返回字符串数组。</td></tr><tr><td><code>replace(char oldChar, char newChar)</code></td><td>替换字符串中的字符。</td></tr><tr><td><code>replaceAll(String regex, String replacement)</code></td><td>使用正则表达式替换所有匹配的部分。</td></tr><tr><td><code>startsWith(String prefix)</code></td><td>判断字符串是否以指定前缀开始。</td></tr><tr><td><code>endsWith(String suffix)</code></td><td>判断字符串是否以指定后缀结束。</td></tr><tr><td><code>contains(CharSequence sequence)</code></td><td>判断字符串是否包含指定的字符序列。</td></tr><tr><td><code>isEmpty()</code></td><td>判断字符串是否为空（长度为0）。</td></tr></tbody></table><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><p>以下是字符串、数组和 <code>Map</code> 的常见遍历方法的总结表格：</p><table><thead><tr><th>数据类型</th><th>遍历方法</th><th>示例代码</th></tr></thead><tbody><tr><td><strong>String</strong></td><td><code>charAt(int index)</code></td><td><code>for (int i = 0; i &lt; str.length(); i++) &#123; char c = str.charAt(i); &#125;</code></td></tr><tr><td></td><td><code>toCharArray()</code></td><td><code>for (char c : str.toCharArray()) &#123; ... &#125;</code></td></tr><tr><td></td><td><code>String.split(String regex)</code></td><td><code>for (String s : str.split(&quot;,&quot;)) &#123; ... &#125;</code></td></tr><tr><td><strong>Array</strong></td><td>增强型 <code>for</code> 循环</td><td><code>for (int element : array) &#123; ... &#125;</code></td></tr><tr><td></td><td><code>for</code> 循环</td><td><code>for (int i = 0; i &lt; array.length; i++) &#123; int element = array[i]; &#125;</code></td></tr><tr><td></td><td><code>Arrays.stream(array)</code></td><td><code>Arrays.stream(array).forEach(element -&gt; &#123; ... &#125;);</code></td></tr><tr><td><strong>Map</strong></td><td><code>entrySet()</code></td><td><code>for (Map.Entry&lt;K, V&gt; entry : map.entrySet()) &#123; ... &#125;</code></td></tr><tr><td></td><td><code>keySet()</code></td><td><code>for (K key : map.keySet()) &#123; V value = map.get(key); &#125;</code></td></tr><tr><td></td><td><code>values()</code></td><td><code>for (V value : map.values()) &#123; ... &#125;</code></td></tr><tr><td></td><td><code>forEach(BiConsumer)</code></td><td><code>map.forEach((key, value) -&gt; &#123; ... &#125;);</code></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DATABASE</title>
    <link href="/2024/09/18/DATABASE/"/>
    <url>/2024/09/18/DATABASE/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="MYSQL数据库知识汇总"><a href="#MYSQL数据库知识汇总" class="headerlink" title="MYSQL数据库知识汇总"></a>MYSQL数据库知识汇总</h1><h2 id="MySQL数据类型汇总"><a href="#MySQL数据类型汇总" class="headerlink" title="MySQL数据类型汇总"></a>MySQL数据类型汇总</h2><p><font color="yellow">MySQL与Java数据类型的对应关系：</font></p><p><strong>1. 数值类型</strong></p><table><thead><tr><th>MySQL 数据类型</th><th>Java 数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td><code>byte</code></td><td>范围：-128 到 127</td></tr><tr><td><code>SMALLINT</code></td><td><code>short</code></td><td>范围：-32,768 到 32,767</td></tr><tr><td><code>MEDIUMINT</code></td><td><code>int</code></td><td>范围：-8,388,608 到 8,388,607</td></tr><tr><td><code>INT</code> &#x2F; <code>INTEGER</code></td><td><code>int</code></td><td>范围：-2^31 到 2^31-1</td></tr><tr><td><code>BIGINT</code></td><td><code>long</code></td><td>范围：-2^63 到 2^63-1</td></tr><tr><td><code>DECIMAL(p, s)</code></td><td><code>java.math.BigDecimal</code></td><td>精确的定点数值，可以用于处理货币等需要高精度的值</td></tr><tr><td><code>FLOAT</code></td><td><code>float</code></td><td>单精度浮点数</td></tr><tr><td><code>DOUBLE</code></td><td><code>double</code></td><td>双精度浮点数</td></tr><tr><td><code>BIT</code></td><td><code>boolean</code> 或 <code>byte</code></td><td>用于布尔值或位字段，Java中常用 <code>boolean</code></td></tr></tbody></table><p><strong>2. 字符串类型</strong></p><table><thead><tr><th>MySQL 数据类型</th><th>Java 数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>CHAR(n)</code></td><td><code>String</code></td><td>固定长度的字符串</td></tr><tr><td><code>VARCHAR(n)</code></td><td><code>String</code></td><td>可变长度的字符串</td></tr><tr><td><code>TEXT</code></td><td><code>String</code></td><td>长文本数据</td></tr><tr><td><code>TINYTEXT</code></td><td><code>String</code></td><td>最多255字节的文本</td></tr><tr><td><code>MEDIUMTEXT</code></td><td><code>String</code></td><td>最多16,777,215字节的文本</td></tr><tr><td><code>LONGTEXT</code></td><td><code>String</code></td><td>最多4GB的文本</td></tr></tbody></table><p><strong>3. 日期和时间类型</strong></p><table><thead><tr><th>MySQL 数据类型</th><th>Java 数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>DATE</code></td><td><code>java.sql.Date</code></td><td>只包含日期，格式为<code>YYYY-MM-DD</code></td></tr><tr><td><code>DATETIME</code></td><td><code>java.sql.Timestamp</code> 或 <code>java.util.Date</code></td><td>日期和时间，格式为<code>YYYY-MM-DD HH:MM:SS</code></td></tr><tr><td><code>TIMESTAMP</code></td><td><code>java.sql.Timestamp</code></td><td>带有时区的日期时间戳</td></tr><tr><td><code>TIME</code></td><td><code>java.sql.Time</code></td><td>只包含时间，格式为<code>HH:MM:SS</code></td></tr><tr><td><code>YEAR</code></td><td><code>int</code></td><td>仅年份，范围为 1901 到 2155</td></tr></tbody></table><p><strong>4. 二进制数据类型</strong></p><table><thead><tr><th>MySQL 数据类型</th><th>Java 数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>BINARY(n)</code></td><td><code>byte[]</code></td><td>固定长度的二进制数据</td></tr><tr><td><code>VARBINARY(n)</code></td><td><code>byte[]</code></td><td>可变长度的二进制数据</td></tr><tr><td><code>BLOB</code></td><td><code>byte[]</code></td><td>二进制大对象，最大长度64KB</td></tr><tr><td><code>TINYBLOB</code></td><td><code>byte[]</code></td><td>最大255字节的二进制数据</td></tr><tr><td><code>MEDIUMBLOB</code></td><td><code>byte[]</code></td><td>最大16MB的二进制数据</td></tr><tr><td><code>LONGBLOB</code></td><td><code>byte[]</code></td><td>最大4GB的二进制数据</td></tr></tbody></table><p><strong>5. 布尔和枚举类型</strong></p><table><thead><tr><th>MySQL 数据类型</th><th>Java 数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>BOOLEAN</code></td><td><code>boolean</code></td><td><code>BOOLEAN</code> 实际上是 <code>TINYINT(1)</code>，1表示<code>true</code>，0表示<code>false</code></td></tr><tr><td><code>ENUM</code></td><td><code>String</code></td><td>枚举类型，对应Java中的字符串</td></tr></tbody></table><p><strong>6. JSON 数据类型</strong></p><table><thead><tr><th>MySQL 数据类型</th><th>Java 数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>JSON</code></td><td><code>String</code> 或 <code>org.json.JSONObject</code></td><td>JSON格式的数据，通常在Java中作为<code>String</code>处理，或者通过第三方库（如<code>org.json.JSONObject</code>）处理</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE使用教程</title>
    <link href="/2024/09/08/VUE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/09/08/VUE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="VUE响应式原理"><a href="#VUE响应式原理" class="headerlink" title="VUE响应式原理"></a>VUE响应式原理</h1><p>VUE组件采用MVVM架构，即model-view-viewmodel。其中model也就是数据，view是视图，而viewmodel就是vue实例对象。我们知道vue实例对象会建立视图和模型（数据）之间的联系。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视图 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;root&#x27;</span>&gt;</span><br>           欢迎：&#123;&#123; name &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- vue实例对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;相cx&quot;</span></span><br><span class="language-javascript">    vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#root&quot;</span></span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">name</span>: name,</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;))</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中name就是模型（数据），vm是视图模型，vm实例对象将数据渲染到页面视图中。</p><p><font color="#FFFF00">在这个过程中，vue要求数据是响应式的，即要求vue能够监听数据，当模型（数据）发生改变时，视图能够改变；当视图中的数据修改后，模型（数据）也会改变。</font></p><p>实现这个响应式功能的原理分为<font color="yellow">数据代理</font>和<font color="yellow">数据劫持</font>。</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p>下图展示了数据代理的原理。</p><p><font color="yellow">在数据代理中，vue做了以下工作：</font></p><ol><li>将data数据放到_data配置项中。</li><li>通过<font color="#FFFFF"><strong><code>object.defineProperty()</code></strong></font>函数定义属性，将_data的属性在vue根目录下定义了一份。</li></ol><p>以下述代码为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VUE响应式原理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 欢迎：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>年龄： &#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 座右铭:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;brief&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;相cx&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">brief</span>:<span class="hljs-string">&quot;打不死的小强&quot;</span>,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.age</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font</span>: <span class="hljs-number">700</span> <span class="hljs-number">30px</span> <span class="hljs-string">&quot;STZhongsong&quot;</span>;</span><br><span class="language-css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">font</span>: inherit</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据原理图中的流程和上图的结果显示:</p><ol><li><p>vm首先将data中的数据加载到<code>_data</code>配置项中，<code>_data</code>中每一个属性都有一个get函数和set函数，这是数据劫持，在后面会进行分析。</p></li><li><p>随后将_data的属性在vue根目录下定义了一份。利用<font color="#FFFFF"><strong><code>object.defineProperty()</code></strong></font>函数。模拟age属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">object.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>, age, &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">age</span>,<br>    <span class="hljs-comment">// 当调用this.age时，get函数调用</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">age</span><br>&#125;,<br>    <span class="hljs-comment">// 当修改this.age时，set函数调用</span><br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">age</span> = value<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>因此上述代码就是<font color="yellow">数据代理流程</font>，即通过数据代理将<code>this.age</code>和<code>this._data.age</code>之间绑定在一起。</p></li></ol><h2 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h2><p><font color="yellow">数据代理只将<code>this.property</code>和<code>this._data.property</code>之间相互绑定，这样我们在程序中执行诸如<code>this.age=20</code>的赋值指令时，vm底层中的<code>this._data.age</code>也会改变。</font></p><p>但是，我们最终需要让视图中显示的数据，也就是的值也会改变。这就涉及到<font color="yellow">数据劫持</font>。</p><p>前面我们知道<code>_data</code>中每一个属性都有一个get函数和set函数，这是vm将data数据加载前，对数据进行的改进。</p><p>模拟一个数据劫持：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> data = &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//创建一个监视的实例对象，用于监视data中属性的变化</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> obs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(data)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obs)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//准备一个vm实例对象</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> vm = &#123;&#125;</span><br><span class="language-javascript">vm.<span class="hljs-property">_data</span> = data = obs</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Observer</span>(<span class="hljs-params">obj</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//汇总对象中所有的属性形成一个数组</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)</span><br><span class="language-javascript"><span class="hljs-comment">//遍历</span></span><br><span class="language-javascript">keys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">k</span>)=&gt;</span>&#123;</span><br><span class="language-javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>,k,&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> obj[k]</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;k&#125;</span>被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`</span>)</span><br><span class="language-javascript">obj[k] = val</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果我们不理解这个代码。只需要知道：</p><p><strong><font color="yellow">数据也是通过<code>set</code>和<code>get</code>函数来绑定<code>_data</code>中的值和视图值之间的联系。</font></strong></p><ul><li><strong><font color="yellow">当我们修改<code>this.property</code>值的时候，数据代理的<code>set()</code>函数调用，修改<code>this_data.property</code>的值，同时数据劫持的<code>set()</code>函数调用，<code>setter</code> 会更新数据的值，并通知所有依赖于该属性的 <code>Watcher</code> 实例。<code>Watcher</code> 实例接收到通知后，会重新计算相关的渲染函数，最终导致视图的更新。</font></strong></li><li><strong><font color="yellow">当修改视图中的值时，<code>Watcher</code> 实例接收到通知后，仍然调用数据劫持的<code>set()</code>函数，修改<code>this._data.property。</code></font></strong></li><li><strong><font color="yellow">当组件渲染时，模板中的数据属性会被读取。每次数据属性被读取时，对应的 <code>getter</code> 会被调用。Vue 通过 <code>getter</code> 收集依赖（即哪些 <code>Watcher</code> 实例依赖于该属性）</font></strong></li></ul><h2 id="VUE2响应式原理的局限性"><a href="#VUE2响应式原理的局限性" class="headerlink" title="VUE2响应式原理的局限性"></a>VUE2响应式原理的局限性</h2><p>视图和模型数据之间的响应式依赖数据劫持，也就是<code>this._data.property</code>中的setter函数和getter函数。**<font color="#FFFFFF">如果没有setter函数和getter函数，数据自然不是响应式的。</font>**</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VUE响应式原理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 欢迎：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>年龄： &#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 座右铭:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;brief&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>朋友：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;f in friend&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;f.name&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>姓名：&#123;&#123;f.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>年龄：&#123;&#123;f.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;相cx&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">brief</span>:<span class="hljs-string">&quot;打不死的小强&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">friend</span>:[</span><br><span class="language-javascript">          &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;,</span><br><span class="language-javascript">          &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">21</span>&#125;,</span><br><span class="language-javascript">          &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;333&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>&#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.age</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font</span>: <span class="hljs-number">700</span> <span class="hljs-number">30px</span> <span class="hljs-string">&quot;STZhongsong&quot;</span>;</span><br><span class="language-css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">font</span>: inherit</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="#FFFFFF">对象object的局限性</font></strong></p><p>当我们在原有对象的基础上，添加一个新的对象属性<code>sex</code>，可以看到，sex并没有getter函数和setter函数，因此它不是响应式数据。</p><p><strong><font color="#FFFFFF">数组array的局限性</font></strong></p><p>我们看到数组的对象有setter和getter函数，但是数组本身并没有setter函数和getter函数，也就是<font color="yellow">通过<code>this.friend[0]=&#123;name:&quot;4444&quot;, age:23&#125;</code>的赋值方式无法修改视图的值。</font></p><p><font color="yellow">解决方案：</font></p><p>对于数组，.使用这些<code>API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code>可以实现响应式，因为vue重写了这些API，实现了响应式效果。</p><p>使用<code>Vue.set() 或 vm/this.$set()</code>和<code>Vue.delete()或vm/this.$delete()</code>函数修改数据可以实现响应式效果。 特别注意：不能给vm 或 vm的根数据对象 添加属性！！！</p><p>效果如下图所示：</p><h2 id="总结Vue数据监测实例"><a href="#总结Vue数据监测实例" class="headerlink" title="总结Vue数据监测实例"></a>总结Vue数据监测实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>总结数据监视<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">button</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">Vue监视数据的原理：</span><br><span class="hljs-comment">1. vue会监视data中所有层次的数据。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. 如何监测对象中的数据？</span><br><span class="hljs-comment">通过setter实现监视，且要在new Vue时就传入要监测的数据。</span><br><span class="hljs-comment">(1).对象中后追加的属性，Vue默认不做响应式处理</span><br><span class="hljs-comment">(2).如需给后添加的属性做响应式，请使用如下API：</span><br><span class="hljs-comment">Vue.set(target，propertyName/index，value) 或 </span><br><span class="hljs-comment">vm.$set(target，propertyName/index，value)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3. 如何监测数组中的数据？</span><br><span class="hljs-comment">通过包裹数组更新元素的方法实现，本质就是做了两件事：</span><br><span class="hljs-comment">(1).调用原生对应的方法对数组进行更新。</span><br><span class="hljs-comment">(2).重新解析模板，进而更新页面。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4.在Vue修改数组中的某个元素一定要用如下方法：</span><br><span class="hljs-comment">1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</span><br><span class="hljs-comment">2.Vue.set() 或 vm.$set()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;</span>修改性别<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(h,index) in student.hobby&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;h&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>朋友们：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(f,index) in student.friends&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">student</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript"><span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;抽烟&#x27;</span>,<span class="hljs-string">&#x27;喝酒&#x27;</span>,<span class="hljs-string">&#x27;烫头&#x27;</span>],</span><br><span class="language-javascript"><span class="hljs-attr">friends</span>:[</span><br><span class="language-javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jerry&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">35</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tony&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">36</span>&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">addSex</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">addFriend</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">friends</span>.<span class="hljs-title function_">unshift</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">70</span>&#125;)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">updateFirstFriendName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">friends</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">addHobby</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;学习&#x27;</span>)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">updateHobby</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span><br><span class="language-javascript"><span class="hljs-comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;开车&#x27;</span>)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">removeSmoke</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>.<span class="hljs-property">hobby</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">h</span>)=&gt;</span>&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> h !== <span class="hljs-string">&#x27;抽烟&#x27;</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="F:\CX_notes\Project_Team\Front_Rear_End\vue\尚硅谷Vue2.0+Vue3.0全套教程\代码\vue_basic\03_数据绑定">F:\CX_notes\Project_Team\Front_Rear_End\vue\尚硅谷Vue2.0+Vue3.0全套教程\代码\vue_basic\03_数据绑定</a></p><p><a href="F:\CX_notes\Project_Team\Front_Rear_End\vue\尚硅谷Vue2.0+Vue3.0全套教程\代码\vue_basic\12_列表渲染">F:\CX_notes\Project_Team\Front_Rear_End\vue\尚硅谷Vue2.0+Vue3.0全套教程\代码\vue_basic\12_列表渲染</a></p><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=33">B站视频</a></p></blockquote><h1 id="Vue-Route"><a href="#Vue-Route" class="headerlink" title="Vue-Route"></a>Vue-Route</h1><p>安装指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npm</span> install vue-router@<span class="hljs-number">3</span> // vue2只能用<span class="hljs-number">3</span>.x版本<br>npm install vue-router@<span class="hljs-number">4</span> // vue3可以使用<span class="hljs-number">4</span>.x版本<br></code></pre></td></tr></table></figure><p>基础配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span> <span class="hljs-comment">//导入路由</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span> <br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>) <span class="hljs-comment">//导入插件</span><br><br><span class="hljs-comment">//编辑路由</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/login&quot;</span>),<br>    <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,<br>  &#125;<br>]<br><br><span class="hljs-comment">/** 声明路由器 */</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  routes, <span class="hljs-comment">//路由</span><br>  <span class="hljs-attr">base</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-comment">//应用的基路径，默认是 ‘/’</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-comment">//路由模式，默认是hash</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router <span class="hljs-comment">//暴露路由器</span><br></code></pre></td></tr></table></figure><h2 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h2><p><strong>路由模式有<code>hash</code>和<code>history</code>两种：</strong></p><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><blockquote><p>例如对于路由&#x2F;index,hash路径是<a href="http://localhost:8080/#/index/">http://localhost:8080/#/index/</a> 请求服务器路径始终是<a href="http://localhost:8080/%EF%BC%9B%E8%80%8Chistory%E8%AF%B7%E6%B1%82%E6%98%AFhttp://localhost:8080/index/%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E6%B2%A1%E6%9C%89%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BC%9A%E8%BF%94%E5%9B%9E404%E3%80%82%E4%BD%86%E6%98%AF%E5%8F%AA%E6%9C%89%E5%88%B7%E6%96%B0%E4%BC%9A%E5%87%BA%E7%8E%B0404%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%B9%B6%E4%B8%8D%E4%BC%9A%EF%BC%8C%E5%9B%A0%E4%B8%BAroute%E7%9A%84%E6%9C%BA%E5%88%B6%E8%B7%B3%E8%BD%AC%E4%B8%8D%E4%BC%9A%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82">http://localhost:8080/；而history请求是http://localhost:8080/index/这个请求服务器并没有，所以会返回404。但是只有刷新会出现404，跳转并不会，因为route的机制跳转不会请求服务器。</a></p></blockquote><h2 id="routes的常用配置项"><a href="#routes的常用配置项" class="headerlink" title="routes的常用配置项"></a>routes的常用配置项</h2><ol><li><p>**<code>path</code>**（必填）</p><ul><li><p><strong>作用</strong>：定义路由的路径，即当浏览器地址栏中 URL 变为该路径时，会激活此路由。</p></li><li><p><strong>类型</strong>：<code>string</code></p></li><li><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeComponent</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>说明</strong>：可以使用动态参数、通配符等，例如 <code>/user/:id</code>、<code>/path/*</code>。</p></li></ul></li><li><p>**<code>component</code>**（必填）</p><ul><li><p><strong>作用</strong>：定义当路由匹配时，展示的 Vue 组件。</p></li><li><p><strong>类型</strong>：<code>VueComponent</code> 或异步加载的函数</p></li><li><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeComponent</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>异步加载组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/HomeComponent.vue&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>name</code></strong></p><ul><li><p><strong>作用</strong>：为路由命名，方便在代码中通过 <code>name</code> 进行跳转而非 <code>path</code>。</p></li><li><p><strong>类型</strong>：<code>string</code></p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeComponent</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>name</code> 跳转：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>redirect</code></strong></p><ul><li><p><strong>作用</strong>：定义重定向规则，当访问某个路径时，自动跳转到另一个路径。</p></li><li><p><strong>类型</strong>：<code>string</code>、<code>Object</code> 或 <code>Function</code></p></li><li><p>示例：</p><ul><li><p>重定向到固定路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/old-home&#x27;</span>,<br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态重定向：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">javascript复制代码&#123;<br>  <span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;/old-home&#x27;</span>,<br>  redirect: (to) =&gt; &#123;<br>    // `<span class="hljs-selector-tag">to</span>` 是目标路由对象<br>    return &#123; <span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong><code>alias</code></strong></p><ul><li><p><strong>作用</strong>：给当前路由设置一个或多个别名，用户访问别名时，视图会显示该路由的组件。</p></li><li><p><strong>类型</strong>：<code>string</code> 或 <code>string[]</code></p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">alias</span>: <span class="hljs-string">&#x27;/main&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeComponent</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>children</code></strong></p><ul><li><p><strong>作用</strong>：配置子路由（嵌套路由），子路由可以在父路由的 <code>router-view</code> 中渲染。</p></li><li><p><strong>类型</strong>：<code>Array</code></p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserComponent</span>,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;profile&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserProfileComponent</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;posts&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserPostsComponent</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>注意</strong>：子路由的 <code>path</code> 是相对路径。</p></li></ul></li><li><p><strong><code>meta</code></strong></p><ul><li><p><strong>作用</strong>：可以为路由添加自定义数据，通常用于权限控制、页面标题等自定义逻辑。</p></li><li><p><strong>类型</strong>：<code>Object</code></p></li><li><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">AdminComponent</span>,<br>  <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">requiresAuth</span>: <span class="hljs-literal">true</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用时可以在导航守卫中通过 <code>route.meta</code> 获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">requiresAuth</span>) &#123;<br>    <span class="hljs-comment">// 执行一些权限验证逻辑</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>props</code></strong></p><ul><li><p><strong>作用</strong>：允许将路由参数作为属性传递给组件，支持布尔值、对象或函数形式。</p></li><li><p><strong>类型</strong>：<code>Boolean</code>、<code>Object</code> 或 <code>Function</code></p></li><li><p>示例：</p><ul><li><p>布尔值形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserComponent</span>,<br>  <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">// 将 route.params 作为 props 传递</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数形式：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">javascript复制代码&#123;<br>  path: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>  component: UserComponent,<br>  props: <span class="hljs-function"><span class="hljs-params">(route)</span> =&gt;</span> (&#123; userId: route.params.id &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong><code>beforeEnter</code></strong></p><ul><li><p><strong>作用</strong>：在路由进入之前执行的守卫函数，可以用来控制访问权限或执行其他逻辑。</p></li><li><p><strong>类型</strong>：<code>Function</code></p></li><li><p><strong>参数</strong>：<code>to</code>, <code>from</code>, <code>next</code>（与全局 <code>beforeEach</code> 导航守卫类似）</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">DashboardComponent</span>,<br>  <span class="hljs-attr">beforeEnter</span>: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isLoggedIn</span>()) &#123;<br>      <span class="hljs-title function_">next</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>caseSensitive</code></strong></p><ul><li><p><strong>作用</strong>：是否对路由的路径进行大小写敏感匹配。</p></li><li><p><strong>类型</strong>：<code>Boolean</code></p></li><li><p><strong>默认值</strong>：<code>false</code></p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeComponent</span>,<br>  <span class="hljs-attr">caseSensitive</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>pathToRegexpOptions</code></strong></p><ul><li><p><strong>作用</strong>：为路径正则表达式提供额外的选项，用于修改路由路径匹配行为（通常用于自定义匹配规则）。</p></li><li><p><strong>类型</strong>：<code>Object</code></p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserComponent</span>,<br>  <span class="hljs-attr">pathToRegexpOptions</span>: &#123; <span class="hljs-attr">strict</span>: <span class="hljs-literal">true</span> &#125;  <span class="hljs-comment">// 严格模式：尾部斜杠必须匹配</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><font color="yellow">可以自定义属性，但是推荐将自定义属性放在 <code>meta</code> 配置项中。</font></p></li></ol><h1 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h1><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install sass-loader<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端学习-ElementUI表单</title>
    <link href="/2024/08/07/2024-08-07/"/>
    <url>/2024/08/07/2024-08-07/</url>
    
    <content type="html"><![CDATA[<p>文章记录了ElementUI中表单的用法。</p><span id="more"></span><h1 id="前端学习-ElementUI表单"><a href="#前端学习-ElementUI表单" class="headerlink" title="前端学习-ElementUI表单"></a>前端学习-ElementUI表单</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><p><strong>官网：<a href="https://element.eleme.cn/#/zh-CN/component/form">https://element.eleme.cn/#/zh-CN/component/form</a></strong></p><h2 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;FormContainer&quot;&gt;<br>    &lt;el-form :model=&quot;user&quot; :rules=&quot;rules&quot; ref=&quot;form&quot;&gt;<br>      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;<br>        &lt;el-input type=&quot;text&quot; v-model=&quot;user.username&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; v-model=&quot;user.password&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;/el-input&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-button class=&quot;submit&quot; type=&quot;primary&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;<br>    &lt;/el-form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    name:&quot;UIForm&quot;,<br>    data()&#123;<br>      return &#123;<br>        user:&#123;&#125;,<br>        rules: &#123;<br>      username: [<br>        &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;<br>      ],<br>      password: [<br>        &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;<br>      ]<br>    &#125;<br>      &#125;<br>    &#125;,<br>    methods:&#123;<br>      login() &#123;<br>    this.$refs.form.validate((valid) =&gt; &#123;<br>      if (valid) &#123;<br>        // 表单验证通过<br>        console.log(&quot;表单验证成功&quot;);<br>      &#125; else &#123;<br>        // 表单验证失败<br>        console.error(&quot;表单验证失败&quot;);<br>        return false;<br>      &#125;<br>    &#125;);<br>  &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.FormContainer &#123;<br>  width: 100vw;<br>  height: 100vh;<br>  background: #222222;<br>  position: relative;<br>  .el-form&#123;<br>    width: 500px;<br>    height: 500px;<br>    position: absolute;<br>    padding: 50px;<br>    top: 0;<br>    left: 0;<br>    right: 0;<br>    bottom: 0;<br>    margin: auto;<br>    background: #FFFFFF;<br>    border: 2px solid #00bfff;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="/2024/08/07/2024-08-07/%E5%9B%BE1.png" class title="图1"><p>上述示例是一个简单的登录表单界面。但涵盖了ElementUI中表单的基本用法。</p><h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a><font color="yellow">重点：</font></h3><ol><li><p>表单结构如上述所示，有一个<code>el-form</code>和一个或者多个<code>el-form-item</code>和按钮组成。</p></li><li><p><code>el-form</code>中<font color="yellow"><code>model</code></font>是表单数据项，当用户输入数据时，数据会更新到 <code>model</code> 中；当 <code>model</code> 更新时，表单控件的显示也会随之更新。<font color="yellow">它的作用在于记录当前表单的数据项，用于后面的表单验证。</font></p></li><li><p><code>el-form</code>中的<font color="yellow"><code>rules</code></font>是表单规则，规定了数据项需要满足哪些条件。编码规则如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-attr">username</span>: [<br>        &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入用户名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;<br>    ],<br>    <span class="hljs-attr">password</span>: [<br>        &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>表单项想要使用规则需要以<code>&lt;el-form-item prop=&quot;username&quot;&gt;</code>的方式声明，<font color="yellow"><code>prop</code></font>是表单域 model 字段</p></li><li><p><font color="yellow"><code>lable</code></font>是数据项标签。标签的相关配置项可以看官方文档，</p></li><li><p><font color="yellow"><code>validate</code></font>是表单验证方法，它的原理是检查<code>el-form</code>的<code>model</code>，将<code>model</code>中的每一个字段和<code>rules</code>中的字段对应，观察是否满足规则，如果全部满足则返回true，否则返回false。如果<code>rules</code>中的字段在<code>model</code>中没有找到，也会返回false。<font color="yellow">因此<code>validate</code>表单验证是首先看数据项中是否用了规则，然后观察<code>model</code>中的数据是否满足规则，所有<code>model</code>是必须有的。</font></p></li><li><p>数据项出现提示，并不是<code>validate</code>方法，而是<font color="yellow"><code>validate</code>事件</font>，它不在乎是否有<code>model</code>数据项，而是观察数据项中的<code>v-model=username</code>是否满足规则。<font color="yellow">如果输入框没有<code>v-model=username</code>，数据是无法输入的</font>，因为输入的数据检测不到。</p></li></ol><h2 id="rules基本配置项"><a href="#rules基本配置项" class="headerlink" title="rules基本配置项"></a><code>rules</code>基本配置项</h2><ol><li><p><strong><code>required</code></strong>:</p><ul><li><strong>类型</strong>: <code>Boolean</code></li><li><strong>描述</strong>: 是否为必填项。如果设置为 <code>true</code>，字段必须有值才能通过验证。</li><li><strong>示例</strong>: <code>&#123; required: true, message: &#39;请输入用户名&#39;, trigger: &#39;blur&#39; &#125;</code></li></ul></li><li><p><strong><code>message</code></strong>:</p><ul><li><strong>类型</strong>: <code>String</code></li><li><strong>描述</strong>: 验证失败时显示的错误消息。</li><li><strong>示例</strong>: <code>&#123; required: true, message: &#39;请输入用户名&#39;, trigger: &#39;blur&#39; &#125;</code></li></ul></li><li><p><strong><code>trigger</code></strong>:</p><ul><li><strong>类型</strong>: <code>String</code> | <code>Array</code></li><li><strong>描述</strong>: 触发验证的事件。例如，<code>blur</code>（失去焦点时）、<code>change</code>（值改变时）、<code>input</code>（每次输入时）等。</li><li><strong>示例</strong>: <code>&#123; required: true, message: &#39;请输入用户名&#39;, trigger: [&#39;blur&#39;, &#39;change&#39;] &#125;</code></li></ul></li><li><p><strong><code>min</code></strong>:</p><ul><li><strong>类型</strong>: <code>Number</code></li><li><strong>描述</strong>: 对于字符串或数组，表示最小长度。对于数字，表示最小值。</li><li><strong>示例</strong>: <code>&#123; min: 3, message: &#39;用户名长度不能少于3个字符&#39;, trigger: &#39;blur&#39; &#125;</code></li></ul></li><li><p><strong><code>max</code></strong>:</p><ul><li><strong>类型</strong>: <code>Number</code></li><li><strong>描述</strong>: 对于字符串或数组，表示最大长度。对于数字，表示最大值。</li><li><strong>示例</strong>: <code>&#123; max: 10, message: &#39;用户名长度不能超过10个字符&#39;, trigger: &#39;blur&#39; &#125;</code></li></ul></li><li><p><strong><code>pattern</code></strong>:</p><ul><li><strong>类型</strong>: <code>RegExp</code></li><li><strong>描述</strong>: 正则表达式，用于验证字段值是否符合某种模式。</li><li><strong>示例</strong>: <code>&#123; pattern: /^[a-zA-Z0-9]&#123;6,12&#125;$/, message: &#39;密码长度为6到12位的字母或数字&#39;, trigger: &#39;blur&#39; &#125;</code></li></ul></li><li><p><strong><code>validator</code></strong>:</p><ul><li><strong>类型</strong>: <code>Function</code></li><li><strong>描述</strong>: 自定义验证函数，用于实现更复杂的验证逻辑。函数接受 <code>rule</code>、<code>value</code> 和 <code>callback</code> 三个参数。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;密码长度不能少于6个字符&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="validate方法"><a href="#validate方法" class="headerlink" title="validate方法"></a><code>validate</code>方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">form</span>.<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (valid) &#123;<br>    <span class="hljs-comment">// 表单验证通过</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;表单验证成功&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 表单验证失败</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;表单验证失败&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>valid是返回的Boolean值，如果满足规则返回true，否则返回false。</p><h2 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>使用<code>validator</code>可以自定义验证函数。官网中的案例如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form :model=&quot;ruleForm&quot; status-icon :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;<br>  &lt;el-form-item label=&quot;密码&quot; prop=&quot;pass&quot;&gt;<br>    &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.pass&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;checkPass&quot;&gt;<br>    &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.checkPass&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;年龄&quot; prop=&quot;age&quot;&gt;<br>    &lt;el-input v-model.number=&quot;ruleForm.age&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;&gt;提交&lt;/el-button&gt;<br>    &lt;el-button @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br>&lt;script&gt;<br>  export default &#123;<br>    data() &#123;<br>      var checkAge = (rule, value, callback) =&gt; &#123;<br>        if (!value) &#123;<br>          return callback(new Error(&#x27;年龄不能为空&#x27;));<br>        &#125;<br>        setTimeout(() =&gt; &#123;<br>          if (!Number.isInteger(value)) &#123;<br>            callback(new Error(&#x27;请输入数字值&#x27;));<br>          &#125; else &#123;<br>            if (value &lt; 18) &#123;<br>              callback(new Error(&#x27;必须年满18岁&#x27;));<br>            &#125; else &#123;<br>              callback();<br>            &#125;<br>          &#125;<br>        &#125;, 1000);<br>      &#125;;<br>      var validatePass = (rule, value, callback) =&gt; &#123;<br>        if (value === &#x27;&#x27;) &#123;<br>          callback(new Error(&#x27;请输入密码&#x27;));<br>        &#125; else &#123;<br>          if (this.ruleForm.checkPass !== &#x27;&#x27;) &#123;<br>            this.$refs.ruleForm.validateField(&#x27;checkPass&#x27;);<br>          &#125;<br>          callback();<br>        &#125;<br>      &#125;;<br>      var validatePass2 = (rule, value, callback) =&gt; &#123;<br>        if (value === &#x27;&#x27;) &#123;<br>          callback(new Error(&#x27;请再次输入密码&#x27;));<br>        &#125; else if (value !== this.ruleForm.pass) &#123;<br>          callback(new Error(&#x27;两次输入密码不一致!&#x27;));<br>        &#125; else &#123;<br>          callback();<br>        &#125;<br>      &#125;;<br>      return &#123;<br>        ruleForm: &#123;<br>          pass: &#x27;&#x27;,<br>          checkPass: &#x27;&#x27;,<br>          age: &#x27;&#x27;<br>        &#125;,<br>        rules: &#123;<br>          pass: [<br>            &#123; validator: validatePass, trigger: &#x27;blur&#x27; &#125;<br>          ],<br>          checkPass: [<br>            &#123; validator: validatePass2, trigger: &#x27;blur&#x27; &#125;<br>          ],<br>          age: [<br>            &#123; validator: checkAge, trigger: &#x27;blur&#x27; &#125;<br>          ]<br>        &#125;<br>      &#125;;<br>    &#125;,<br>    methods: &#123;<br>      submitForm(formName) &#123;<br>        this.$refs[formName].validate((valid) =&gt; &#123;<br>          if (valid) &#123;<br>            alert(&#x27;submit!&#x27;);<br>          &#125; else &#123;<br>            console.log(&#x27;error submit!!&#x27;);<br>            return false;<br>          &#125;<br>        &#125;);<br>      &#125;,<br>      resetForm(formName) &#123;<br>        this.$refs[formName].resetFields();<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><img src="/2024/08/07/2024-08-07/%E5%9B%BE2.png" class title="图2"><p>本例还使用<font color="yellow"><code>status-icon</code>属性</font>为输入框添加了表示校验结果的反馈图标。通过自定义规则，实现确认密码的验证和文本类型的判断。</p><h2 id="官网案例"><a href="#官网案例" class="headerlink" title="官网案例"></a>官网案例</h2><h3 id="典型表单"><a href="#典型表单" class="headerlink" title="典型表单"></a>典型表单</h3><img src="/2024/08/07/2024-08-07/%E5%9B%BE3.png" class title="图3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;<br>  &lt;el-form-item label=&quot;活动名称&quot;&gt;<br>    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;活动区域&quot;&gt;<br>    &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;<br>      &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;<br>      &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;<br>    &lt;/el-select&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;活动时间&quot;&gt;<br>    &lt;el-col :span=&quot;11&quot;&gt;<br>      &lt;el-date-picker type=&quot;date&quot; placeholder=&quot;选择日期&quot; v-model=&quot;form.date1&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-date-picker&gt;<br>    &lt;/el-col&gt;<br>    &lt;el-col class=&quot;line&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;<br>    &lt;el-col :span=&quot;11&quot;&gt;<br>      &lt;el-time-picker placeholder=&quot;选择时间&quot; v-model=&quot;form.date2&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-time-picker&gt;<br>    &lt;/el-col&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;即时配送&quot;&gt;<br>    &lt;el-switch v-model=&quot;form.delivery&quot;&gt;&lt;/el-switch&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;活动性质&quot;&gt;<br>    &lt;el-checkbox-group v-model=&quot;form.type&quot;&gt;<br>      &lt;el-checkbox label=&quot;美食/餐厅线上活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>      &lt;el-checkbox label=&quot;地推活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>      &lt;el-checkbox label=&quot;线下主题活动&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>      &lt;el-checkbox label=&quot;单纯品牌曝光&quot; name=&quot;type&quot;&gt;&lt;/el-checkbox&gt;<br>    &lt;/el-checkbox-group&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;特殊资源&quot;&gt;<br>    &lt;el-radio-group v-model=&quot;form.resource&quot;&gt;<br>      &lt;el-radio label=&quot;线上品牌商赞助&quot;&gt;&lt;/el-radio&gt;<br>      &lt;el-radio label=&quot;线下场地免费&quot;&gt;&lt;/el-radio&gt;<br>    &lt;/el-radio-group&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;活动形式&quot;&gt;<br>    &lt;el-input type=&quot;textarea&quot; v-model=&quot;form.desc&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;<br>    &lt;el-button&gt;取消&lt;/el-button&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br>&lt;script&gt;<br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        form: &#123;<br>          name: &#x27;&#x27;,<br>          region: &#x27;&#x27;,<br>          date1: &#x27;&#x27;,<br>          date2: &#x27;&#x27;,<br>          delivery: false,<br>          type: [],<br>          resource: &#x27;&#x27;,<br>          desc: &#x27;&#x27;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      onSubmit() &#123;<br>        console.log(&#x27;submit!&#x27;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="动态增减表单项"><a href="#动态增减表单项" class="headerlink" title="动态增减表单项"></a>动态增减表单项</h3><img src="/2024/08/07/2024-08-07/%E5%9B%BE4.png" class title="图4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form :model=&quot;dynamicValidateForm&quot; ref=&quot;dynamicValidateForm&quot; label-width=&quot;100px&quot; class=&quot;demo-dynamic&quot;&gt;<br>  &lt;el-form-item<br>    prop=&quot;email&quot;<br>    label=&quot;邮箱&quot;<br>    :rules=&quot;[<br>      &#123; required: true, message: &#x27;请输入邮箱地址&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>      &#123; type: &#x27;email&#x27;, message: &#x27;请输入正确的邮箱地址&#x27;, trigger: [&#x27;blur&#x27;, &#x27;change&#x27;] &#125;<br>    ]&quot;<br>  &gt;<br>    &lt;el-input v-model=&quot;dynamicValidateForm.email&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item<br>    v-for=&quot;(domain, index) in dynamicValidateForm.domains&quot;<br>    :label=&quot;&#x27;域名&#x27; + index&quot;<br>    :key=&quot;domain.key&quot;<br>    :prop=&quot;&#x27;domains.&#x27; + index + &#x27;.value&#x27;&quot;<br>    :rules=&quot;&#123;<br>      required: true, message: &#x27;域名不能为空&#x27;, trigger: &#x27;blur&#x27;<br>    &#125;&quot;<br>  &gt;<br>    &lt;el-input v-model=&quot;domain.value&quot;&gt;&lt;/el-input&gt;&lt;el-button @click.prevent=&quot;removeDomain(domain)&quot;&gt;删除&lt;/el-button&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;dynamicValidateForm&#x27;)&quot;&gt;提交&lt;/el-button&gt;<br>    &lt;el-button @click=&quot;addDomain&quot;&gt;新增域名&lt;/el-button&gt;<br>    &lt;el-button @click=&quot;resetForm(&#x27;dynamicValidateForm&#x27;)&quot;&gt;重置&lt;/el-button&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br>&lt;script&gt;<br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        dynamicValidateForm: &#123;<br>          domains: [&#123;<br>            value: &#x27;&#x27;<br>          &#125;],<br>          email: &#x27;&#x27;<br>        &#125;<br>      &#125;;<br>    &#125;,<br>    methods: &#123;<br>      submitForm(formName) &#123;<br>        this.$refs[formName].validate((valid) =&gt; &#123;<br>          if (valid) &#123;<br>            alert(&#x27;submit!&#x27;);<br>          &#125; else &#123;<br>            console.log(&#x27;error submit!!&#x27;);<br>            return false;<br>          &#125;<br>        &#125;);<br>      &#125;,<br>      resetForm(formName) &#123;<br>        this.$refs[formName].resetFields();<br>      &#125;,<br>      removeDomain(item) &#123;<br>        var index = this.dynamicValidateForm.domains.indexOf(item)<br>        if (index !== -1) &#123;<br>          this.dynamicValidateForm.domains.splice(index, 1)<br>        &#125;<br>      &#125;,<br>      addDomain() &#123;<br>        this.dynamicValidateForm.domains.push(&#123;<br>          value: &#x27;&#x27;,<br>          key: Date.now()<br>        &#125;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端学习-CSS绘制多边形</title>
    <link href="/2024/08/06/2024-08-06/"/>
    <url>/2024/08/06/2024-08-06/</url>
    
    <content type="html"><![CDATA[<p>文章记录了CSS绘制多边形的方法，特别是利用border设计对话框的三角行。</p><span id="more"></span><h1 id="前端学习-CSS绘制多边形"><a href="#前端学习-CSS绘制多边形" class="headerlink" title="前端学习-CSS绘制多边形"></a>前端学习-CSS绘制多边形</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><h2 id="CSS绘制三角形"><a href="#CSS绘制三角形" class="headerlink" title="CSS绘制三角形"></a>CSS绘制三角形</h2><p>在 CSS 中绘制三角形通常是通过<font color="yellow">利用 <code>border</code> 属性的技巧来实现的</font>。这种方法利用了元素的边框设置来创建一个透明的区域，从而形成三角形的视觉效果。</p><h3 id="1-向上的三角形"><a href="#1-向上的三角形" class="headerlink" title="1. 向上的三角形"></a>1. <strong>向上的三角形</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Up Triangle<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.triangle-up</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>width</code> 和 <code>height</code> 设置为 <code>0</code>，让元素本身没有实际的宽度和高度。</li><li><code>border-left</code> 和 <code>border-right</code> 设为 <code>20px solid transparent</code>，创建透明的边框。</li><li><code>border-bottom</code> 设为 <code>20px solid blue</code>，创建底部的边框颜色，形成向上的三角形。</li></ul><h3 id="2-向下的三角形"><a href="#2-向下的三角形" class="headerlink" title="2. 向下的三角形"></a>2. <strong>向下的三角形</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Down Triangle<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.triangle-down</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">20px</span> solid red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle-down&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>border-top</code> 设为 <code>20px solid red</code>，创建顶部的边框颜色，形成向下的三角形。</li></ul><h3 id="3-向左的三角形"><a href="#3-向左的三角形" class="headerlink" title="3. 向左的三角形"></a>3. <strong>向左的三角形</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">html复制代码<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Left Triangle<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.triangle-left</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20px</span> solid green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle-left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>border-right</code> 设为 <code>20px solid green</code>，创建右侧的边框颜色，形成向左的三角形。</li></ul><h3 id="4-向右的三角形"><a href="#4-向右的三角形" class="headerlink" title="4. 向右的三角形"></a>4. <strong>向右的三角形</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">html复制代码<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Right Triangle<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.triangle-right</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20px</span> solid yellow;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle-right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="CSS绘制任意图像"><a href="#CSS绘制任意图像" class="headerlink" title="CSS绘制任意图像"></a>CSS绘制任意图像</h2><p><code>clip-path</code> 属性允许你定义一个裁剪区域，从而创建各种形状，包括多边形。常用的多边形有四边形、五边形、六边形等。利用<code>poligon()</code>函数进行裁剪。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(x1 y1, x2 y2, x3 y3, ...);<br></code></pre></td></tr></table></figure><p>绘制一个五边形：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Polygon<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.polygon</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#3498db</span>;</span><br><span class="language-css">      <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">50%</span> <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">38%</span>, <span class="hljs-number">82%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">18%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">0%</span> <span class="hljs-number">38%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;polygon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/basic-shape/polygon">https://developer.mozilla.org/zh-CN/docs/Web/CSS/basic-shape/polygon</a></p></blockquote><h2 id="CSS绘制对话框实例"><a href="#CSS绘制对话框实例" class="headerlink" title="CSS绘制对话框实例"></a>CSS绘制对话框实例</h2><img src="/2024/08/06/2024-08-06/%E5%9B%BE1.png" class title="图1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>绘制多边形<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 图标绘制 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 多边形绘制 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 绘制对话框 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog dialog1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>          绘制三角形样式:<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poligon&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget triangle1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget triangle2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget triangle3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 绘制多边形 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>            绘制多边形样式:<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poligon&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget square&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget pentagon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span> <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#111111</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">20%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">40%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">  <span class="hljs-selector-class">.icon</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">101</span>, <span class="hljs-number">179</span>, <span class="hljs-number">205</span>, <span class="hljs-number">0.6</span>);</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-selector-class">.img</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>: space-around;</span><br><span class="language-css">    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">130px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-selector-class">.dialog</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: <span class="hljs-number">#2e485a</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">      <span class="hljs-selector-class">.triangle1</span> &#123;</span><br><span class="language-css">          <span class="hljs-comment">/* 使用polygon函数绘制三角形 */</span></span><br><span class="language-css">          <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">50%</span> <span class="hljs-number">0%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">100%</span>,<span class="hljs-number">0%</span> <span class="hljs-number">100%</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.triangle2</span> &#123;</span><br><span class="language-css">          <span class="hljs-comment">/* 使用polygon函数绘制三角形 */</span></span><br><span class="language-css">          <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">0</span> <span class="hljs-number">0%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">100%</span>,<span class="hljs-number">50%</span> <span class="hljs-number">100%</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.triangle3</span> &#123;</span><br><span class="language-css">          <span class="hljs-comment">/* 使用polygon函数绘制三角形 */</span></span><br><span class="language-css">          <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">100%</span> <span class="hljs-number">0%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">100%</span>,<span class="hljs-number">0%</span> <span class="hljs-number">100%</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.pentagon</span> &#123;</span><br><span class="language-css">          <span class="hljs-comment">/* 使用polygon函数绘制五边形 */</span></span><br><span class="language-css">          <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">50%</span> <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> <span class="hljs-number">38%</span>, <span class="hljs-number">82%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">18%</span> <span class="hljs-number">100%</span>, <span class="hljs-number">0%</span> <span class="hljs-number">38%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.square</span> &#123;</span><br><span class="language-css">          <span class="hljs-comment">/* 使用polygon函数绘制四边形 */</span></span><br><span class="language-css">          <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">50%</span> <span class="hljs-number">0%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">50%</span>,<span class="hljs-number">50%</span> <span class="hljs-number">100%</span>,<span class="hljs-number">0%</span> <span class="hljs-number">50%</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.other</span> &#123;</span><br><span class="language-css">          <span class="hljs-comment">/* 使用polygon函数绘制任意图形 */</span></span><br><span class="language-css">          <span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">polygon</span>(<span class="hljs-number">0</span> <span class="hljs-number">0%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">0%</span>,<span class="hljs-number">51%</span> <span class="hljs-number">10%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">20%</span>,<span class="hljs-number">51%</span> <span class="hljs-number">30%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">40%</span>,<span class="hljs-number">51%</span> <span class="hljs-number">50%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">60%</span>,<span class="hljs-number">51%</span> <span class="hljs-number">70%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">80%</span>,<span class="hljs-number">51%</span> <span class="hljs-number">90%</span>,<span class="hljs-number">100%</span> <span class="hljs-number">100%</span>,<span class="hljs-number">0%</span> <span class="hljs-number">100%</span>,<span class="hljs-number">49%</span> <span class="hljs-number">90%</span>,<span class="hljs-number">0</span> <span class="hljs-number">80%</span>,<span class="hljs-number">49%</span> <span class="hljs-number">70%</span>,<span class="hljs-number">0</span> <span class="hljs-number">60%</span>,<span class="hljs-number">49%</span> <span class="hljs-number">50%</span>,<span class="hljs-number">0</span> <span class="hljs-number">40%</span>,<span class="hljs-number">49%</span> <span class="hljs-number">30%</span>,<span class="hljs-number">0</span> <span class="hljs-number">20%</span>,<span class="hljs-number">49%</span> <span class="hljs-number">10%</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.dialog1</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="language-css">      <span class="hljs-comment">/* 模仿三角形边框 */</span></span><br><span class="language-css">      <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: -<span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.dialog1</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">      <span class="hljs-comment">/* 模仿三角形填充 */</span></span><br><span class="language-css">      <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid transparent;</span><br><span class="language-css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#2e485a</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: -<span class="hljs-number">18px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font</span>: <span class="hljs-number">700</span> <span class="hljs-number">20px</span> <span class="hljs-string">&quot;STZhongsong&quot;</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.poligon</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">      <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">      <span class="hljs-selector-class">.widget</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>前端三件套</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端学习-Vue组件之间的交互</title>
    <link href="/2024/08/04/2024-08-04/"/>
    <url>/2024/08/04/2024-08-04/</url>
    
    <content type="html"><![CDATA[<p>文章记录Vue组件之间交互的几种方式，包括父组件和子组件之间的数据传参和事件触发。</p><span id="more"></span><h1 id="前端学习-Vue组件之间的交互"><a href="#前端学习-Vue组件之间的交互" class="headerlink" title="前端学习-Vue组件之间的交互"></a>前端学习-Vue组件之间的交互</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><p>组件的<code>props</code>配置项用于接收由父组件向该组件传递的参数。<font color="yellow">数据的传递是父组件——&gt;子组件</font>。</p><p>使用方法：父组件在子组件的DOM节点中给定参数。子组件通过<code>props</code>接收参数。</p><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br><span class="hljs-attr">name</span>:&#123;<br><span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>, <span class="hljs-comment">//类型</span><br><span class="hljs-attr">required</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//必要性</span><br><span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;老王&#x27;</span> <span class="hljs-comment">//默认值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>      &lt;!-- 传递父组件的arr参数，子组件接收的变量为newArr --&gt;<br>    &lt;ChildComponent v-if=&quot;showComponent&quot; :newArr=&quot;arr&quot;&gt;&lt;/ChildComponent&gt; <br>    &lt;ChildComponent v-if=&quot;showComponent&quot; :newArr=&quot;arr&quot;&gt;&lt;/ChildComponent&gt;<br>    &lt;el-button @click=&quot;()=&gt;&#123;arr.push(data++)&#125;&quot;&gt;更改数组&lt;/el-button&gt;<br>    &#123;&#123; data &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br>export default &#123;<br>  components:&#123;ChildComponent&#125;,<br>  data() &#123;<br>    return &#123;<br>      arr : [&quot;父组件初始数据&quot;],<br>      data : 0,<br>      showComponent : true,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.container &#123;<br>  height: 100vh;<br>  width: 100vw;<br>  background: #080E19;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><font color="#FFFF00">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-container&quot;&gt;<br>    &#123;&#123; arr &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props:&#123;<br>    newArr:&#123;<br>      type: Array,<br>      default: ()=&gt;[&quot;初始参数&quot;]<br>    &#125;<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      arr:[&quot;子组件初始数据&quot;],<br>    &#125;<br>  &#125;,<br>  created()&#123;<br>    this.arr = this.newArr<br>    this.arr.push(&quot;子组件数据&quot;)<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style land=&quot;scss&quot; scoped&gt;<br>.child-container &#123;<br>  height: 30%;<br>  width: 30%;<br>  background: #00b8b8;<br>  font-size: 30px;<br>  font-family: &quot;STZhongsong&quot;;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="/2024/08/04/2024-08-04/%E5%9B%BE1.png" class title="图1"><p><font color="yellow">注意点：</font></p><ol><li><code>props</code>接收的参数是<font color="yellow">不支持更改的</font>。如果需要改动数据，需要复制一份到<code>data</code>配置项中的变量中。例如上述<code>this.arr=this.newArr</code>。</li><li>在传递数组和对象是，<font color="yellow"><code>props</code>参数传递方式是引用传递</font>。也就是说不同子组件和父组件数组指向的是同一个数组。在上诉代码中，<code>this.arr=this.newArr</code>也是浅复制，两个子组件的<code>this.arr</code>和父组件的<code>this.arr</code>指向的都是同一个数组，所以当一个子组件更改数组数据时，会对另一个子组件的数组造成影响，因此上诉“子组件数据”字符串插入了两次。<font color="yellow">在对象和数组的复制操作中，我们需要保证是否需要进行深复制</font>。</li></ol><p>使用 <code>v-bind</code> 指令可以将父组件的数据绑定到子组件的 <code>props</code> 上。这适用于动态绑定 <code>props</code> 或传递多个 <code>props</code>。</p><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;ChildComponent v-bind=&quot;parentProps&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br><br>export default &#123;<br>  components: &#123; ChildComponent &#125;,<br>  data() &#123;<br>    return &#123;<br>      parentProps: &#123;<br>        message: &#x27;Hello from parent&#x27;,<br>        count: 42<br>      &#125;<br>    &#125;;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    message: String,<br>    count: Number<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">注意点：</font></p><ul><li>父组件<code>parentProps</code>中的keys值需要和子组件<code>props</code>中的keys值对应起来。</li></ul><p>除了data数据，<font color="yellow">父组件可以将方法作为 <code>props</code> 传递给子组件</font>。子组件可以在其方法中调用这些 <code>props</code> 传递过来的方法。</p><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;ChildComponent :parentMethod=&quot;handleParentMethod&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br><br>export default &#123;<br>  components: &#123; ChildComponent &#125;,<br>  methods: &#123;<br>    handleParentMethod(message) &#123;<br>      console.log(&#x27;Parent method called with message:&#x27;, message);<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;callParentMethod&quot;&gt;Call Parent Method&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    parentMethod: &#123;<br>      type: Function,<br>      required: true<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    callParentMethod() &#123;<br>      this.parentMethod(&#x27;Hello from child&#x27;);<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">注意点：</font></p><ul><li>通过方法我们可以将子组件的数据传递给父组件，实现<font color="#FFFF00">子组件——&gt;父组件</font>。</li></ul><blockquote><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=66">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=66</a></p><p>SpringBoot+VUE快速入门.md</p></blockquote><h2 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h2><p>在 Vue.js 中，<code>mixin</code> 是一种复用组件逻辑的机制。通过 <code>mixin</code>，你可以将多个组件共享的逻辑提取到一个独立的 <code>mixin</code> 对象中，然后在多个组件中使用它们。<code>mixin</code> 允许你将共享的逻辑、数据、生命周期钩子等封装在一起，以便重用。</p><p><font color="yellow">定义 Mixin：</font></p><p>一个 <code>mixin</code> 对象可以包含组件的选项，如 <code>data</code>、<code>methods</code>、<code>computed</code>、<code>watch</code>、<code>lifecycle hooks</code> 等。以下是一个 <code>mixin</code> 的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// myMixin.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> myMixin = &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">mixinData</span>: <span class="hljs-string">&#x27;This is mixin data&#x27;</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">mixinMethod</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This is a method from mixin&#x27;</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Mixin created hook&#x27;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><font color="yellow"> 在组件中使用 Mixin：</font></p><p>要在组件中使用 <code>mixin</code>，你需要在组件的 <code>mixins</code> 选项中引入定义好的 <code>mixin</code> 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- MyComponent.vue --&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;&#123;&#123; mixinData &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;mixinMethod&quot;&gt;Call Mixin Method&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; myMixin &#125; from &#x27;./myMixin&#x27;;<br><br>export default &#123;<br>  mixins: [myMixin],<br>  data() &#123;<br>    return &#123;<br>      componentData: &#x27;This is component data&#x27;<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    console.log(&#x27;Component created hook&#x27;);<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">注意点：</font></p><ol><li><strong>数据合并</strong>：<code>mixin</code> 中的 <code>data</code> 会与组件中的 <code>data</code> 合并。如果 <code>data</code> 中有同名属性，组件中的属性会覆盖 <code>mixin</code> 中的属性。</li><li><strong>方法合并</strong>：<code>mixin</code> 中的 <code>methods</code> 会与组件中的 <code>methods</code> 合并。如果 <code>methods</code> 中有同名方法，组件中的方法会覆盖 <code>mixin</code> 中的方法。</li><li><strong>生命周期钩子合并</strong>：<code>mixin</code> 中的生命周期钩子会与组件中的生命周期钩子合并。如果存在同名钩子函数，它们会被合并为一个函数，在执行时按定义的顺序依次调用。</li><li><strong>全局混入</strong>：在<code>main.js</code>中使用<code>Vue.mixin(myMixin)</code>可以实现全局混入。</li></ol><img src="/2024/08/04/2024-08-04/%E5%9B%BE2.png" class title="图2"><blockquote><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=67">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=67</a></p><p>SpringBoot+VUE快速入门.md</p></blockquote><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:#FFFF00">父组件 ——&gt; 子组件</strong> 。</p><h3 id="默认插槽-具名插槽"><a href="#默认插槽-具名插槽" class="headerlink" title="默认插槽 &#x2F; 具名插槽"></a>默认插槽 &#x2F; 具名插槽</h3><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;ChildComponent&gt;<br>      &lt;template slot=&quot;first&quot;&gt;<br>        &lt;div&gt;<br>          &lt;h3&gt; 插槽数据-FIRST &lt;/h3&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>      &lt;template slot=&quot;second&quot;&gt;<br>        &lt;div&gt;<br>          &lt;h3&gt; 插槽数据-SECOND &lt;/h3&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/ChildComponent&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br>export default &#123;<br>  components:&#123;ChildComponent&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.container &#123;<br>  height: 100vh;<br>  width: 100vw;<br>  background: #080E19;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-container&quot;&gt;<br>    &lt;slot name=&quot;first&quot;&gt;&lt;/slot&gt;<br>    &lt;slot name=&quot;second&quot;&gt;&lt;/slot&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style land=&quot;scss&quot; scoped&gt;<br>.child-container &#123;<br>  height: 30%;<br>  width: 30%;<br>  background: #00b8b8;<br>  font-size: 30px;<br>  font-family: &quot;STZhongsong&quot;;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="/2024/08/04/2024-08-04/%E5%9B%BE3.png" class title="图3"><p>在子组件中定义<code>&lt;slot name=&quot;&quot;&gt;&lt;/slot&gt;</code>插槽，在父组件可以定义HTML结构并插入到子组件中。如果只有一个插槽则无需设置name，用默认插槽即可。</p><p><font color="yellow">注意点：</font></p><ul><li>插槽结构的样式既可以在父组件中定义，也可以在子组件中定义。</li></ul><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p><span style="color:yellow">数据在子组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在子组件中，但使用数据所遍历出来的结构由父组件决定）</p><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>&lt;ChildComponent&gt;<br>&lt;template v-slot:default=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是ul列表 --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/template&gt;<br>&lt;/ChildComponent&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br>export default &#123;<br>  components:&#123;ChildComponent&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-container&quot;&gt;<br>      &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;<br>      &lt;el-button @click=&quot;changeGames&quot;&gt;修改数组&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>      //数据在子组件自身<br>      data() &#123;<br>          return &#123;<br>              games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]<br>          &#125;<br>      &#125;,<br>      methods:&#123;<br>        changeGames()&#123;<br>          this.games.push(&quot;LOL&quot;);<br>        &#125;        <br>      &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><img src="/2024/08/04/2024-08-04/%E5%9B%BE4.png" class title="图4"><p><font color="yellow">注意点：</font></p><ul><li>父组件不能直接“保持”或“保存”作用域插槽传递过来的参数，因为作用域插槽是由子组件提供的，父组件只能使用这些数据，而不能直接修改它们。</li><li>和<code>props</code>参数传参一样，当使用的参数数据变化时，会重写渲染页面。</li></ul><blockquote><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=102">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=102</a></p><p>SpringBoot+VUE快速入门.md</p></blockquote><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在 Vue 中，自定义事件是一种使子组件与父组件进行通信的机制。自定义事件允许子组件向父组件传递信息或通知父组件某些操作。传递方向是<font color="yellow">子组件——&gt;父组件</font></p><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:#FFFF00">事件的回调在A中</span>）。</p><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>&lt;ChildComponent v-on:singal=&quot;slotFunction&quot;&gt;<br>&lt;/ChildComponent&gt;<br><br>&lt;ChildComponent ref=&quot;child&quot;&gt;<br>&lt;/ChildComponent&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br>export default &#123;<br>  components:&#123;ChildComponent&#125;,<br>methods:&#123;<br>slotFunction(params)&#123;<br>console.log(params)<br>alert(&quot;回调函数调用 &quot;+params);<br>&#125;<br>&#125;,<br>mounted()&#123;<br>this.$refs.child.$on(&quot;singal&quot;, this.slotFunction);<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.container &#123;<br>  height: 100vh;<br>  width: 100vw;<br>  background: #080E19;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-container&quot;&gt;<br>      &lt;el-button @click=&quot;triggerFunction&quot;&gt;触发信号&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    methods:&#123;<br>      triggerFunction()&#123;<br>        this.$emit(&quot;singal&quot;,&quot;params&quot;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style land=&quot;scss&quot; scoped&gt;<br>.child-container &#123;<br>  height: 30%;<br>  width: 30%;<br>  background: #00b8b8;<br>  font-size: 30px;<br>  font-family: &quot;STZhongsong&quot;;<br>  color: white;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="具体流程如下"><a href="#具体流程如下" class="headerlink" title="具体流程如下"></a>具体流程如下</h3><p><font color="yellow">第一步：</font>在父组件中创建回调函数，当子组件触发信号的时候，该函数被调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">slotFunction</span>(<span class="hljs-params">params</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;回调函数调用 &quot;</span>+params);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="yellow">第二步：</font>父组件为子组件绑定一个自定义事件，使子组件可以通过触发该事件而调用父组件的回调函数。有两种绑定方式。</p><ol><li><p>在父组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ChildComponent v-on:singal=&quot;slotFunction&quot;&gt;&lt;/ChildComponent&gt;<br>//或者<br>&lt;ChildComponent @singal=&quot;slotFunction&quot;&gt;&lt;/ChildComponent&gt;<br></code></pre></td></tr></table></figure></li><li><p>在父组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ChildComponent ref=&quot;child&quot;&gt;&lt;/ChildComponent&gt;<br>mounted()&#123;<br>this.$refs.child.$on(&quot;singal&quot;, this.slotFunction);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>为子组件绑定了<code>singal</code>事件，通过<code>singal</code>事件触发<code>slotFunction</code>回调函数。</p><p><font color="yellow">第三步：</font>子组件触发事件。可以传递多个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>  <span class="hljs-title function_">triggerFunction</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;singal&quot;</span>,<span class="hljs-string">&quot;params&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li><p>当不再需要使用组件时，最好手动解绑事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">child</span>.$off(<span class="hljs-string">&quot;singal&quot;</span>)<br><span class="hljs-comment">//解绑当前组件的所有事件</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">child</span>.$off()<br></code></pre></td></tr></table></figure></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。没有修饰符会默认是自定义事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ChildComponent @click.native=&quot;slotFunction&quot;&gt;&lt;/ChildComponent&gt;<br></code></pre></td></tr></table></figure></li><li><p>其他的修饰符包括</p><ul><li><code>.stop</code>：调用 <code>event.stopPropagation()</code>，阻止事件冒泡。需要阻止事件从子组件冒泡到父组件时。</li><li><code>.prevent</code>：调用 <code>event.preventDefault()</code>，阻止默认行为。</li><li><code>.once</code>：事件只会触发一次。</li></ul></li><li><p>通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:yellow">要么配置在methods中</span>，<span style="color:yellow">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><blockquote><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=80">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=80</a></p><p>SpringBoot+VUE快速入门.md</p></blockquote><h2 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h2><p>将自定义事件扩展到能够进行<font color="yellow">任意组件间的通信</font>。</p><ol><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>......<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线，$bus就是当前应用的vm</span><br>&#125;,<br>    ......<br>&#125;) <br></code></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:#FFFF00">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:#FFFF00">当前组件所用到的</span>事件。</p></li></ol><blockquote><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=84">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=84</a></p><p>SpringBoot+VUE快速入门.md</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong><font color="yellow">路由中的<code>&lt;router-view ref=&quot;main&quot;&gt;&lt;/router-view&gt;</code>也是子组件，可以绑定事件。</font></strong></p>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-08-02学习总结</title>
    <link href="/2024/08/02/2024-08-02/"/>
    <url>/2024/08/02/2024-08-02/</url>
    
    <content type="html"><![CDATA[<p>本文记录了一些前端学习的知识点</p><span id="more"></span><h1 id="前端学习记录"><a href="#前端学习记录" class="headerlink" title="前端学习记录"></a>前端学习记录</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><h2 id="CSS常见属性的继承性"><a href="#CSS常见属性的继承性" class="headerlink" title="CSS常见属性的继承性"></a>CSS常见属性的继承性</h2><h3 id="可继承属性"><a href="#可继承属性" class="headerlink" title="可继承属性"></a>可继承属性</h3><p>这些属性的值会自动从父元素继承到子元素，除非显式地为子元素设置了其他值。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>color</code></td><td>文本的颜色。</td></tr><tr><td><code>font-family</code></td><td>字体系列。</td></tr><tr><td><code>font-size</code></td><td>字体大小。</td></tr><tr><td><code>font-style</code></td><td>字体样式（如斜体）。</td></tr><tr><td><code>font-weight</code></td><td>字体粗细。</td></tr><tr><td><code>line-height</code></td><td>行高。</td></tr><tr><td><code>text-align</code></td><td>文本对齐方式。</td></tr><tr><td><code>text-indent</code></td><td>文本缩进。</td></tr><tr><td><code>text-transform</code></td><td>文本转换（如大写、小写）。</td></tr><tr><td><code>letter-spacing</code></td><td>字符间距。</td></tr><tr><td><code>word-spacing</code></td><td>单词间距。</td></tr><tr><td><code>text-shadow</code></td><td>文本阴影。</td></tr><tr><td><code>white-space</code></td><td>空白符处理。</td></tr><tr><td><code>visibility</code></td><td>元素可见性。</td></tr><tr><td><code>list-style</code></td><td>列表样式。</td></tr><tr><td><code>border-collapse</code></td><td>边框折叠方式（在表格中）。</td></tr><tr><td><code>border-spacing</code></td><td>边框间距（在表格中）。</td></tr></tbody></table><h3 id="不可继承属性"><a href="#不可继承属性" class="headerlink" title="不可继承属性"></a>不可继承属性</h3><p>这些属性不会自动从父元素继承到子元素，每个元素需要单独设置这些属性的值。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>background</code></td><td>背景颜色、背景图片等。</td></tr><tr><td><code>border</code></td><td>边框的宽度、样式和颜色。</td></tr><tr><td><code>margin</code></td><td>外边距。</td></tr><tr><td><code>padding</code></td><td>内边距。</td></tr><tr><td><font color="#FFFF00"><code>width</code></font></td><td>元素的宽度。</td></tr><tr><td><font color="yellow"><code>height</code></font></td><td>元素的高度。</td></tr><tr><td><code>position</code></td><td>元素的定位方式。</td></tr><tr><td><code>display</code></td><td>元素的显示类型（如块级、行内、隐藏等）。</td></tr><tr><td><code>overflow</code></td><td>内容溢出处理方式。</td></tr><tr><td><code>z-index</code></td><td>元素的堆叠顺序。</td></tr><tr><td><code>box-shadow</code></td><td>盒子阴影。</td></tr><tr><td><code>opacity</code></td><td>元素的不透明度。</td></tr><tr><td><code>float</code></td><td>元素的浮动方式。</td></tr><tr><td><code>clear</code></td><td>清除浮动。</td></tr><tr><td><code>flex</code></td><td>Flexbox 布局属性。</td></tr><tr><td><code>grid</code></td><td>Grid 布局属性。</td></tr><tr><td><code>transform</code></td><td>元素的变换（如旋转、缩放）。</td></tr><tr><td><code>transition</code></td><td>过渡效果。</td></tr><tr><td><code>animation</code></td><td>动画效果。</td></tr></tbody></table><h3 id="继承机制的管理"><a href="#继承机制的管理" class="headerlink" title="继承机制的管理"></a>继承机制的管理</h3><p>对于不可继承的属性，可以使用 <code>inherit</code>, <code>initial</code>, <code>unset</code> 和 <code>revert</code> 值来管理继承行为：</p><ul><li>**<code>inherit</code>**：强制子元素继承父元素的属性值。</li><li>**<code>initial</code>**：将属性值设置为其初始值。</li><li>**<code>unset</code>**：将属性值设置为其继承值或初始值，取决于属性是否继承。</li><li>**<code>revert</code>**：将属性值恢复为由用户代理（浏览器）默认样式表所定义的值。</li></ul><p><font color="#FFFF00">容器设置百分比相对长宽时，由于<code>width</code>和<code>height</code>不会继承，需要保证父容器设置了长宽。</font></p><h2 id="CSS选择器的优先级"><a href="#CSS选择器的优先级" class="headerlink" title="CSS选择器的优先级"></a>CSS选择器的优先级</h2><p><font color="#FFFF00"> 简单描述：<code>!important</code>&gt;行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器&gt;通用选择器(*)&gt;继承样式</font></p><p>详细描述：计算权重。每个选择器，都可计算出一组权重，格式为： (a,b,c)，权重相同则后来者居上。</p><ul><li>a：ID选择器和个数。</li><li>b：类、伪类、属性选择器的个数。</li><li>c：元素、伪元素选择器的个数。</li></ul><blockquote><p><a href="https://www.bilibili.com/video/BV1p84y1P7Z5/?p=86">https://www.bilibili.com/video/BV1p84y1P7Z5/?p=86</a></p><p>《CSS2笔记》 P15</p></blockquote><h2 id="媒体查询和响应式布局"><a href="#媒体查询和响应式布局" class="headerlink" title="媒体查询和响应式布局"></a>媒体查询和响应式布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> &#123;媒体类型 / 媒体特性&#125; <span class="hljs-selector-attr">[ &#123;运算符&#125; &#123;媒体类型 / 媒体特性&#125;  ]</span>&#123;<br>    CSS样式<br>&#125; <br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1000px</span>) &#123; <span class="hljs-comment">/* 当媒体为屏幕且视口宽度小于等于1000px时，采用下面的样式 */</span><br>    <span class="hljs-selector-class">.el-aside</span> &#123;<br>        <span class="hljs-attribute">position</span>: fixed;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span>;<br><br>        &amp;<span class="hljs-selector-class">.hide-aside</span> &#123;<br>            <span class="hljs-attribute">left</span>: -<span class="hljs-number">250px</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h3><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>all</td><td>检测所有设备</td></tr><tr><td>screen</td><td>检查电子屏幕</td></tr><tr><td>print</td><td>监测打印机</td></tr></tbody></table><h3 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h3><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>width</td><td>检测视口宽度</td></tr><tr><td>max-width</td><td>检测视口最大宽度</td></tr><tr><td>min-width</td><td>检测视口最小宽度</td></tr><tr><td>height&#x2F;max-height&#x2F;min-height</td><td>类似宽度</td></tr><tr><td>device-width&#x2F;max-device-width&#x2F;min-device-width</td><td>检测<font color="yellow">屏幕</font>宽度&#x2F;最大宽度&#x2F;最小宽度</td></tr><tr><td>orientation</td><td>检测视口的旋转方向（是否横屏）<br>1.<code>portrait</code>：视口处于纵向，即高度大于等于宽度。<br>2.<code>landscape</code>：视口处于横向，即宽度大于高度。</td></tr></tbody></table><p>完整列表请参考：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a></strong></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>and</td><td>并且</td></tr><tr><td>, 或者 or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr><tr><td>only</td><td>是（加载@media后，某些低版本IE浏览器不检测媒体特性和运算符，避免混乱）</td></tr></tbody></table><blockquote><p><a href="https://www.bilibili.com/video/BV1p84y1P7Z5?p=197">https://www.bilibili.com/video/BV1p84y1P7Z5?p=197</a></p><p>《CSS3笔记》 P29</p></blockquote><h2 id="Sass编译器安装"><a href="#Sass编译器安装" class="headerlink" title="Sass编译器安装"></a>Sass编译器安装</h2><p><strong>Sass是一种CSS预处理器。</strong>Sass提供了一种更简单、更优雅的语法来描述CSS，并支持变量、混合器等功能，使CSS开发更加灵活和高效。Sass源码可以通过编译器转换成标准的CSS代码。</p><p>首次安装：首先全局安装。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install sass -g<br></code></pre></td></tr></table></figure><p>vue终端敲下面代码（电脑上之前全局安装过Sass，不需要第一步操作，直接在项目上安装依赖）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install --save-dev sass-loader<br></code></pre></td></tr></table></figure><h2 id="scoped属性和-deep-v-deep-深度选择器"><a href="#scoped属性和-deep-v-deep-深度选择器" class="headerlink" title="scoped属性和:deep(::v-deep)深度选择器"></a>scoped属性和:deep(::v-deep)深度选择器</h2><h3 id="scoped属性"><a href="#scoped属性" class="headerlink" title="scoped属性"></a>scoped属性</h3><p>vue中的<code>scoped</code>属性用来实现组件级样式封装的一个功能，它确保样式仅作用于当前组件，而不会影响到其他组件。它的渲染规则有：</p><ol><li><code>scoped</code>给当前组件中HTML的所有DOM节点添加一个相同且与其他组件不重复的<code>data属性</code>，来表示组件的唯一性。</li><li>css选择器编译后，会更改为其末尾添加当前组的data属性的属性选择器来私有化样式。</li><li>如果组件内部包含子组件，子组件作为HTML的一个DOM节点会添加data属性，但子组件的子组件不会添加属性。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div&gt;<br>      &lt;div&gt;<br>        &lt;div&gt;<br>          &lt;div style=&quot;color:#FFFFFF&quot;&gt; scoped原理分析 &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;el-tabs&gt;<br>      &lt;el-tab-pane label=&quot;标签1&quot;&gt;<br>        &lt;div style=&quot;color:#FFFF00&quot;&gt;标签内容&lt;/div&gt;<br>      &lt;/el-tab-pane&gt;<br>    &lt;/el-tabs&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.container &#123;<br>  height: 100vh;<br>  width: 100vw;<br>  background: #080E19;<br>  .el-tabs&#123;<br>    background:#000000;<br>    border: 1px solid #FFFFFF;<br>      .el-tabs__content&#123;<br>      background-color: #FFFFFF;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="/2024/08/02/2024-08-02/%E5%9B%BE1.png" class title="图1"><p>这个例子我们使用了<code>Element-UI</code>组件来渲染页面。<code>Element-UI</code>组件实现了很多控件功能，而每一个控件都是由一个或多个组件实现的。例如<code>el-tabs</code>标签栏，我们可以看到包含了4个组件。</p><img src="/2024/08/02/2024-08-02/%E5%9B%BE2.png" class title="图2"><p>打开控制台分析页面结构。</p><img src="/2024/08/02/2024-08-02/%E5%9B%BE3.png" class title="图3"><p><font color="yellow">根据第一条规则</font>，组件HTML的所有DOM节点都会添加相同的属性<code>data-v-1f2b5af6</code>，计算有多重div容器也会全部添加。</p><p><font color="#FFFF00">根据第三条规则</font>，ElTabs是当前组件的子组件，也会添加属性。但是TabNav、TabBar、ElTabPane是ElTabs组件的子组件，不会添加data属性。</p><img src="/2024/08/02/2024-08-02/%E5%9B%BE4.png" class title="图4"><img src="/2024/08/02/2024-08-02/%E5%9B%BE5.png" class title="图5"><p><font color="yellow">根据第二条规则</font>，<code>.container&#123;&#125;</code>选择器在经过编译以后变成了<code>.container[data-v-1f2b5af6]&#123;&#125;</code>属性选择器。<code>.container .el-tabs&#123;&#125;</code>选择器编程以后成为了<code>.container .el-tabs[data-v-1f2b5af6]</code>选择器。</p><p>那么同理，<code>.container .el-tabs .tabs__content&#123;&#125;</code>选择器编译会成为<code>.container .el-tabs .el-tabs__content[data-v-1f2b5af6]&#123;&#125;</code>。但是由于<code>el.tabs__content</code>并没有添加data属性，<font color="yellow">所以选择器不起作用，背景颜色未改变</font>。</p><p>为了解决这个问题，我们需要使用<code>:deep / ::v-deep</code>深度选择器。</p><h3 id="deep-v-deep"><a href="#deep-v-deep" class="headerlink" title=":deep / ::v-deep"></a><code>:deep / ::v-deep</code></h3><p>在 Vue.js 中，<code>:deep</code> 是一个用于穿透 <code>scoped</code> 样式封装的特殊选择器。它允许你在父组件中应用样式到子组件的内部元素，从而实现样式的深层次影响。</p><p>我们修改上述选择器：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 原选择器 */</span><br><span class="hljs-selector-class">.el-tabs__content</span>&#123;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br><span class="hljs-comment">/* 更改后选择器 */</span><br>:<span class="hljs-built_in">deep</span>(.el-tabs__content)&#123;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/08/02/2024-08-02/%E5%9B%BE6.png" class title="图6"><p>背景色改变，我们看到<font color="yellow"><code>.container .el-tabs .tabs__content&#123;&#125;</code>选择器编译变成了<code>.container .el-tabs[data-v-1f2b5af6] .el-tabs__content&#123;&#125;</code></font>。</p><blockquote><p><a href="https://blog.csdn.net/wgh4318/article/details/128711849">https://blog.csdn.net/wgh4318/article/details/128711849</a></p><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=69">https://www.bilibili.com/video/BV1Zy4y1K7SH?p=69</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端学习-Vue 组件生命周期</title>
    <link href="/2024/07/31/2024-07-31/"/>
    <url>/2024/07/31/2024-07-31/</url>
    
    <content type="html"><![CDATA[<p>本文记录了Vue组件生命周期流程，Vue中的异步问题，以及this.$nextTick的使用。</p><span id="more"></span><h1 id="前端学习-Vue-组件生命周期"><a href="#前端学习-Vue-组件生命周期" class="headerlink" title="前端学习-Vue 组件生命周期"></a>前端学习-Vue 组件生命周期</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><h2 id="组件生命周期流程"><a href="#组件生命周期流程" class="headerlink" title="组件生命周期流程"></a>组件生命周期流程</h2><p>Vue 组件的生命周期包括一系列的钩子函数，这些函数在组件的不同阶段被调用。了解这些生命周期钩子可以帮助你在合适的时机执行特定的操作。</p><img src="/2024/07/31/2024-07-31/%E5%9B%BE1.png" class title="图1"><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><ol><li>**<code>beforeCreate()</code>**：当组件实例被创建之后，此时数据观测和事件配置都还未进行，例如<code>watch</code>事件此时也还未开始监听数据。此时 <code>data</code> 和 <code>methods</code> 尚不可用。</li><li>**<code>created()</code>**： 组件实例创建完成，数据观测和事件配置已经完成，此时 <code>data</code> 和 <code>methods</code> 可用。可以在这里进行数据初始化和 API 请求。如果<code>watch</code>监听事件使用了<code>immediate:true</code>属性，那么<code>handler</code>已经调用完成。</li></ol><h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h3><ol><li><strong><code>beforeMount()</code></strong>: 组件挂载之前调用，此时模板已编译完成，<code>render</code> 函数已被调用，Vue 已经生成了组件的虚拟 DOM，但实际的 DOM 元素还没有生成和被插入到页面中。</li><li><strong><code>mounted</code></strong>: 组件挂载完成，此时 真实DOM 已经被插入到页面中。可以在这里进行 DOM 操作、第三方库初始化等操作。</li></ol><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><ol><li><strong><code>beforeUpdate</code></strong>: 数据发生变化后，DOM 更新之前调用。Vue 已经更新了组件的虚拟 DOM，可以在这里进行数据处理或保存当前状态。</li><li><strong><code>updated</code></strong>: DOM 更新完成后调用。可以在这里执行依赖于最新 DOM 状态的操作。</li></ol><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a><strong>销毁阶段</strong></h3><ol><li><strong><code>beforeDestroy</code></strong>: 组件销毁之前调用。可以在这里进行清理操作，如取消定时器、解绑事件监听等。</li><li><strong><code>destroyed</code></strong>: 组件销毁完成后调用。此时组件的所有子组件都已销毁，DOM 也被删除。</li></ol><p><font color="yellow">注意点：</font></p><ul><li>创建阶段和销毁阶段是对应的。挂载和更新是类似的，挂载是在组件在创建的时候执行，因为需要将DOM插入到页面中，更新阶段只有新的DOM节点会插入的页面中，已有的DOM节点不会动。</li><li>渲染包括是指将组件的模板转化为实际的 DOM 元素。这个过程包括生成虚拟 DOM 和最终将其转换为真实的 DOM。因此渲染既存在挂载也存在更新阶段。<font color="yellow">渲染并不直接对应钩子函数。</font></li></ul><blockquote><p><a href="https://blog.csdn.net/m0_65335111/article/details/125610342">https://blog.csdn.net/m0_65335111/article/details/125610342</a></p></blockquote><h2 id="父组件与子组件的生命周期流程"><a href="#父组件与子组件的生命周期流程" class="headerlink" title="父组件与子组件的生命周期流程"></a>父组件与子组件的生命周期流程</h2><p>首先以下面代码为例。</p><p><font color="yellow">父组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;ChildComponent v-if=&quot;showComponent&quot; :newArr=&quot;arr&quot;&gt;&lt;/ChildComponent&gt;<br>    &lt;el-button @click=&quot;addData&quot;&gt;增加父组件数据&lt;/el-button&gt;<br>    &lt;el-button @click=&quot;()=&gt;&#123;showComponent=!showComponent&#125;&quot;&gt;控制组件&lt;/el-button&gt;<br>    &lt;el-button @click=&quot;()=&gt;&#123;arr.push(&#x27;newdata&#x27;)&#125;&quot;&gt;更改数组&lt;/el-button&gt;<br>    &#123;&#123; data &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ChildComponent from &#x27;./ChildComponent.vue&#x27;;<br>export default &#123;<br>  components:&#123;ChildComponent&#125;,<br>  data() &#123;<br>    return &#123;<br>      arr : [&quot;父组件初始数据&quot;],<br>      data : 0,<br>      showComponent : true,<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    addData()&#123;<br>      this.data++;<br>    &#125;<br>  &#125;,<br>  beforeCreate()&#123;<br>    console.log(&quot;父组件beforeCreate方法调用&quot;);<br>  &#125;,<br>  created()&#123;<br>    console.log(&quot;父组件created方法调用&quot;);<br>  &#125;,<br>  beforeMount()&#123;<br>    console.log(&quot;父组件beforeMount方法调用&quot;);<br>  &#125;,<br>  mounted()&#123;<br>    console.log(&quot;父组件mounted方法调用&quot;);<br>  &#125;,<br>  beforeDestroy()&#123;<br>    console.log(&quot;父组件beforeDestroy方法调用&quot;);<br>  &#125;,<br>  destroyed()&#123;<br>    console.log(&quot;父组件destroyed方法调用&quot;);<br>  &#125;,<br>  beforeUpdate()&#123;<br>    console.log(&quot;父组件beforeUpdate方法调用&quot;);<br>  &#125;,<br>  updated()&#123;<br>    console.log(&quot;父组件updated方法调用&quot;);<br>  &#125;,<br>  deactivated()&#123;<br>    console.log(&quot;父组件deactivated方法调用&quot;);<br>  &#125;,<br>  activated()&#123;<br>    console.log(&quot;父组件activated方法调用&quot;);<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.container &#123;<br>  height: 100vh;<br>  width: 100vw;<br>  background: #080E19;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><font color="yellow">子组件：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-container&quot;&gt;<br>    &lt;el-button @click=&quot;addData&quot;&gt;增加数据&lt;/el-button&gt;<br>    &#123;&#123; data &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props:&#123;<br>    newArr:&#123;<br>      type: Array,<br>      default: ()=&gt;[&quot;初始参数&quot;]<br>    &#125;<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      arr:[&quot;子组件初始数据&quot;],<br>      data:0,<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    addData()&#123;<br>      console.log(&quot;addData方法&quot;)<br>      this.data++;<br>    &#125;<br>  &#125;,<br>  watch:&#123;<br>    newArr()&#123;<br>      console.log(&quot;监听事件调用&quot;)<br>    &#125;<br>  &#125;,<br>  beforeCreate()&#123;<br>    console.log(&quot;子组件beforeCreate方法调用&quot;);<br>  &#125;,<br>  created()&#123;<br>    console.log(&quot;子组件created方法调用&quot;);<br>    console.log(this.arr)<br>    console.log(this.newArr)<br>    console.log(this.data)<br>  &#125;,<br>  beforeMount()&#123;<br>    console.log(&quot;子组件beforeMount方法调用&quot;);<br>  &#125;,<br>  mounted()&#123;<br>    console.log(&quot;子组件mounted方法调用&quot;);<br>  &#125;,<br>  beforeDestroy()&#123;<br>    console.log(&quot;子组件beforeDestroy方法调用&quot;);<br>  &#125;,<br>  destroyed()&#123;<br>    console.log(&quot;子组件destroyed方法调用&quot;);<br>  &#125;,<br>  beforeUpdate()&#123;<br>    console.log(&quot;子组件beforeUpdate方法调用&quot;);<br>  &#125;,<br>  updated()&#123;<br>    console.log(&quot;子组件updated方法调用&quot;);<br>  &#125;,<br>  deactivated()&#123;<br>    console.log(&quot;子组件deactivated方法调用&quot;);<br>  &#125;,<br>  activated()&#123;<br>    console.log(&quot;子组件activated方法调用&quot;);<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style land=&quot;scss&quot; scoped&gt;<br>.child-container &#123;<br>  height: 30%;<br>  width: 30%;<br>  background: #00b8b8;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><img src="/2024/07/31/2024-07-31/%E5%9B%BE2.png" class title="图2"><p><strong>组件创建的生命周期如下：</strong></p><p>父组件<code>beforeCreate</code>——&gt;（父组件数据和事件开始初始化）——&gt; 父组件<code>created</code>——&gt;（此时父组件数据和事件都初始化完成，data数据已经准备好，虚拟DOM开始创建）——&gt; 父组件<code>beforeMount</code>——&gt;（虚拟DOM已经创建，页面渲染开始，真实DOM创建并开始挂载到页面，直到渲染到子组件DOM）——&gt; 子组件<code>beforeCreate</code>——&gt;（子组件数据和事件开始初始化，包括传递的参数props，初始化的数据watch还没有开始监听）——&gt; 子组件<code>created</code>——&gt;（此时子组件数据初始化完成，watch已经开始监听，虚拟DOM开始创建）——&gt; 子组件<code>beforeMount</code>——&gt;（虚拟DOM已经创建，页面渲染开始，真实DOM创建并开始挂载到页面）——&gt; 子组件<code>mounted</code>——&gt; （子组件挂载完成，返回到父组件继续渲染）——&gt; 父组件<code>mounted</code>——&gt;（父组件挂载完成）</p><p><font color="yellow">注意点：</font></p><ul><li>销毁周期和创建周期是相同的。组件的创建生命周期是深度优先遍历的顺序，如果子组件还有子组件，会先创建最深层的子组件。</li></ul><img src="/2024/07/31/2024-07-31/%E5%9B%BE3.png" class title="图3"><p><font color="yellow">注意点：</font></p><ul><li><code>beforeUpdate</code>和<code>updated</code>生命周期钩子的执行时间和<code>beforeMounte</code>和<code>mounted</code>是类似的。因此上述流程很好理解了。 </li><li><code>beforeUpdate</code>和<code>updated</code>生命周期钩子<font color="yellow">只在页面需要重写渲染的时候才会执行，而与数据变化无关</font>，如果数据改变但不影响页面，页面无需更新，则不会重写渲染。</li></ul><h2 id="Vue中的异步问题"><a href="#Vue中的异步问题" class="headerlink" title="Vue中的异步问题"></a>Vue中的异步问题</h2><p>Vue.js是一款渐进式JavaScript框架，专注于构建用户界面。在Vue中，常见的异步操作包括数据请求、路由导航、生命周期钩子函数等。Vue提供了一些方法来处理这些异步操作，最常见的是使用<code>Promise</code>对象。</p><ul><li><p><strong>同步</strong>指的是代码按顺序执行，前一个任务完成后才会执行下一个任务。在同步操作中，代码的执行是阻塞的，即一个操作完成后，才会继续执行下一个操作。</p></li><li><p><strong>异步</strong>指的是代码的执行不一定按顺序进行，任务可以在后台执行，允许主线程继续处理其他任务。异步操作是非阻塞的，即代码可以在后台执行而不阻塞主线程。</p></li></ul><h3 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a><code>Promise</code>对象</h3><p><code>Promise</code> 是 JavaScript 中用于处理异步操作的对象。<font color="yellow">它代表了一个尚未完成但计划中的操作，并允许你在操作完成时处理结果或错误。</font><code>Promise</code> 是异步编程中的一个重要概念，使得异步操作的处理更加清晰和可维护。</p><p>先不谈<code>Promise</code>对象的创建和属性方法，先明白以下几点。</p><ul><li><code>promise</code>是一个对象，用于处理异步操作。</li><li>JS中所有的异步操作都是在<code>Promise</code>对象中执行的，而函数最终会返回这个<code>Promise</code>对象。</li><li><code>Promise</code> 提供了 <code>.then()</code>、<code>.catch()</code> 和 <code>.finally()</code> 方法来处理操作结果和错误。</li></ul><p><strong>以下是一个简单的 <code>Promise</code> 示例，模拟异步操作（例如数据请求）：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> success = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 模拟操作成功或失败</span><br>      <span class="hljs-keyword">if</span> (success) &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Data fetched successfully&#x27;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;Data fetch failed&#x27;</span>);<br>      &#125;<br>    &#125;, <span class="hljs-number">2000</span>); <span class="hljs-comment">// 模拟延迟2秒</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">fetchData</span>()<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// &#x27;Data fetched successfully&#x27;</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error); <span class="hljs-comment">// &#x27;Data fetch failed&#x27;</span><br>  &#125;)<br>  .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Fetch attempt completed&#x27;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p><strong>真实的一个数据请求操作实例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;./api/data&quot;</span>) <span class="hljs-comment">//返回一个Promise对象。</span><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 处理数据</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 处理错误</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a><code>async</code>和<code>await</code></h3><p><code>async</code> 和 <code>await</code> 是 JavaScript 中用于处理异步操作的关键字，提供了更简洁和易读的异步代码写法。它们是基于 <code>Promise</code> 的，允许你以同步的方式编写异步代码。</p><p>在数据请求中，我们需要获取数据以后才能进行数据处理，通过在<code>.then()</code>方法中操作。但是如果数据操作比较复杂，例如需要将得到的数据作为下一个数据请求的参数，这样会导致过多的重叠。而<font color="yellow"><code>async</code>和<code>await</code>允许你以同步的方式编写异步代码就是解决这个问题</font>。</p><ul><li><code>async</code> 函数是一个返回 <code>Promise</code> 对象的函数。在 <code>async</code> 函数中，你可以使用 <code>await</code> 关键字来暂停函数的执行，直到 <code>Promise</code> 对象的异步操作完成。</li><li><code>await</code> 用于等待一个 <code>Promise</code> 对象解析完成。在 <code>await</code> 之前的代码会暂停执行，直到 <code>Promise</code> 被解析，返回的是<code>promise</code>解析结果，而不是<code>promise</code>对象，然后继续执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getDayWeather</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//注意：这里有 async 用来完成异步操作</span><br>    <span class="hljs-comment">// 获取逐小时预报</span><br>    <span class="hljs-comment">// 根据城市名或者经纬度获取城市id</span><br>    <span class="hljs-keyword">let</span> httpUrl = <span class="hljs-string">`https://geoapi.qweather.com/v2/city/lookup?location=<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.city&#125;</span>&amp;key=<span class="hljs-subst">$&#123;key&#125;</span>`</span><br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(httpUrl)<br>    <span class="hljs-keyword">let</span> result = res.<span class="hljs-title function_">json</span>()<br>    <span class="hljs-keyword">let</span> id = result.<span class="hljs-property">location</span>[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    <span class="hljs-comment">// 根据城市id获取具体的天气</span><br>    <span class="hljs-keyword">let</span> httpUrl1 = <span class="hljs-string">`https://devapi.qweather.com/v7/grid-weather/24h?location=<span class="hljs-subst">$&#123;id&#125;</span>&amp;key=<span class="hljs-subst">$&#123;key&#125;</span>`</span><br>    <span class="hljs-keyword">let</span> res1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(httpUrl1)<br>    <span class="hljs-keyword">let</span> result1 = res1.<span class="hljs-title function_">json</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dayClimate</span> = result1.<span class="hljs-property">hourly</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小时天气&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">dayClimate</span>)<br>&#125;,<br></code></pre></td></tr></table></figure><p>上述使用和风天气API获取未来24小时的数据请求，包括两个请求，首先是通过根据城市名或者经纬度获取城市id，然后根据城市id获取具体的天气。在这里，<code>await</code>用于等待异步处理返回，也就是数据请求完成并返回，只有数据返回后，才能进行数据处理。<font color="yellow">而<code>await</code>只能在<code>async</code>函数中使用</font></p><p>类似于下述代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> httpUrl = <span class="hljs-string">`https://geoapi.qweather.com/v2/city/lookup?location=<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.city&#125;</span>&amp;key=<span class="hljs-subst">$&#123;key&#125;</span>`</span><br>    <span class="hljs-title function_">fetch</span>(httpUrl)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> result = res.<span class="hljs-title function_">json</span>()<br>        <span class="hljs-keyword">let</span> id = result.<span class="hljs-property">location</span>[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    <span class="hljs-keyword">let</span> httpUrl1 = <span class="hljs-string">`https://devapi.qweather.com/v7/grid-weather/24h?location=<span class="hljs-subst">$&#123;id&#125;</span>&amp;key=<span class="hljs-subst">$&#123;key&#125;</span>`</span><br>        <span class="hljs-title function_">fetch</span>(httpUrl1)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res1</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">let</span> result1 = res1.<span class="hljs-title function_">json</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dayClimate</span> = result1.<span class="hljs-property">hourly</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小时天气&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">dayClimate</span>)<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="yellow">但需要注意的是，并且async函数本身也返回一个Promise对象，也就是说整个函数本身也是一个异步处理函数。</font></p><blockquote><p><a href="https://blog.csdn.net/qqq1994_0810/article/details/135133857">https://blog.csdn.net/qqq1994_0810/article/details/135133857</a></p></blockquote><h2 id="异步问题对生命周期的影响"><a href="#异步问题对生命周期的影响" class="headerlink" title="异步问题对生命周期的影响"></a>异步问题对生命周期的影响</h2><p>在 Vue.js 中，生命周期钩子函数本身是<strong>同步的</strong>，即它们按照特定的顺序执行，并在生命周期的特定阶段被调用。然而，生命周期钩子函数中可以包含异步操作，如数据请求、定时器等。以下是有关生命周期钩子函数的详细信息：</p><p>生命周期钩子的同步行为:</p><ul><li><strong>同步执行</strong>：生命周期钩子函数（如 <code>created</code>、<code>mounted</code>、<code>updated</code> 等）是同步执行的，即它们会按照定义的顺序被调用，并在生命周期的特定阶段完成执行。</li><li><strong>顺序调用</strong>：Vue.js 会在组件生命周期的不同阶段调用这些钩子函数，从组件实例的创建、挂载到更新和销毁，每个钩子函数都有特定的调用时机。</li></ul><p><font color="yellow">尽管生命周期钩子函数本身是同步的，但可以在这些钩子函数中执行异步操作。这些异步操作不会影响钩子函数的同步执行，但可能会影响组件的状态和视图更新。</font></p><h3 id="this-nextTick"><a href="#this-nextTick" class="headerlink" title="this.$nextTick()"></a><code>this.$nextTick()</code></h3><p>当你更新一个响应式数据，Vue 不会立即同步更新 DOM。相反，Vue 会等到事件循环的下一个 “tick” 才执行这些更新，以进行批量处理和优化。<code>this.$nextTick()</code> 的作用就是在这个更新完成之后，执行你指定的回调函数。<font color="yellow">使用 <code>this.$nextTick()</code> 的关键是确保在需要等待 Vue 更新 DOM 后再执行的场景下使用</font></p><p><strong>异步执行</strong>：<code>this.$nextTick()</code> 的回调函数是异步执行的，因此它不会阻塞主线程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p ref=&quot;paragraph&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;updateMessage&quot;&gt;Update Message&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      message: &quot;Hello, Vue!&quot;<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    updateMessage() &#123;<br>      this.message = &quot;Hello, World!&quot;;<br>      this.$nextTick(() =&gt; &#123;<br>        console.log(this.$refs.paragraph.offsetHeight); // 获取的是更新后的 DOM 高度<br>      &#125;);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>/* 样式 */<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>上述例子如果没有<code>this.$nextTick()</code>，当点击按钮后，<code>this.message</code> 更新为 “Hello, World!”，但是 <code>console.log(this.$refs.paragraph.offsetHeight);</code> 可能获取的是更新前的 <code>p</code> 元素的高度，因为此时 DOM 还未更新。</p><p>虽然没有使用 <code>this.$nextTick()</code>，Vue 仍会更新 DOM，但是在数据更新后立即访问 DOM 时，可能会获取到更新前的状态。使用 <code>this.$nextTick()</code> 能够确保你的操作在 DOM 更新后执行，获取到最新的 DOM 状态，从而保证操作的准确性和一致性。</p>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-数学建模入门指南</title>
    <link href="/2024/07/24/2024-07-24/"/>
    <url>/2024/07/24/2024-07-24/</url>
    
    <content type="html"><![CDATA[<p>文章介绍数学建模的入门指南，梳理数学建模概念。</p><span id="more"></span><h1 id="数学建模入门指南"><a href="#数学建模入门指南" class="headerlink" title="数学建模入门指南"></a>数学建模入门指南</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><p>数学建模是一个将<font color="yellow">现实世界的复杂问题转化成数学形式来对问题进行分析和求解的过程</font>。这个过程涉及将实际问题中的复杂因素简化为数学结构，并用数学语言描述这些因素及其相互关系。</p><blockquote><p><strong>引入经典问题：长方形（四角连线呈长方形）的椅子可以在地面上放稳吗？</strong></p></blockquote><p>这是一个现实世界的问题，数学建模的过程就是需要将其转化成数学形式进行分析和求解。主要分为以下五个步骤。</p><h2 id="建模过程"><a href="#建模过程" class="headerlink" title="建模过程"></a>建模过程</h2><h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><p>大家可能会想,题目不是已经给出问题了吗? 是的,但是这里的提出问题是指用数学语言去表达。</p><p>首先<font color="yellow">分析问题</font>，列出问题中涉及的变量，包括适当的单位。经过分析，我们可以用变量表示椅子的位置，用函数表示椅子四脚与地面的距离，进而用数学语言把问题表达出来.</p><p>接着<font color="yellow">模型假设</font>，我们要抛开一些非主干的问题，因此需要对问题做一些假设。模型假设是我们对问题增加的约束条件，在做模型假设是我们要考虑假设的合理性和特殊性。例如我们不能假设地面时完全水平的或是阶梯，这种假设没有意义。</p><ol><li>假设椅子的四条腿一样长，椅子腿与地面接触处抽象为一个点，，四脚的连线呈长方形。</li><li>地面高度是连续变化的，沿周围任意方向都不会出现间断 (高度突变)，即地面是连续曲面。这个假设相当于给出了椅子能放稳的必要条件。</li><li>对于椅子脚的间距和椅子腿的长度而言，地面是相对平坦的，使椅子在任何位置至少有三只脚同时着地。</li></ol><p>然后<font color="yellow">数学表达</font>，根据模型假设和涉及的变量将问题数学化。这一步通常要结合考虑我们可能会用到的模型。</p><p>我们知道，当椅脚与地面的竖直距离为零时，椅脚就着地了，而当这个距离大于零时，椅脚不着地。假设椅子的四脚记作A，B，C，D。根据假设3至少由三只脚同时着地，那么椅子在地面上移动对问题没有影响，只考虑椅子旋转的情况。因此我们假设某一时刻A，B，C着地，以AC与BD连线的交点为原点，AC为X轴建立平面直角坐标系，设OA与X轴的夹角为θ，因为长方形的旋转可代表椅子位置的改变，则旋转角度θ这一变量可表示椅子的位置。A、B两脚与地面竖直距离之和为f（θ），C、D两脚与地面竖直距离之和为g（θ），其中θ∈[0，π]。</p><img src="/2024/07/24/2024-07-24/18b98e4f898657c25044739c34870862.png" class title="图1"><p>在更多复杂的现实问题中，我们在问题分析和模型假设之前，可能还需要进行<font color="yellow">数据集处理</font>工作。例如我们希望建立模型来预测房价，需要进行一下工作：</p><ol><li>数据收集：通过各个平台收集包含多个房屋特征的数据集，例如房屋面积、卧室数量、位置、房价等。</li><li>数据清洗：收集的数据集可能存在很多问题，数据清洗的目标是处理数据中的问题，使数据质量达到可用的标准。包括<ul><li>缺失值处理：比如数据集中有些房屋的“面积”特征缺失，可以用均值、中位数或最频繁值填充缺失值，或者使用插值方法填补缺失值。</li><li>异常值处理：比如发现一些房屋的“面积”值异常大，可能是录入错误，通过统计分析（如箱线图）识别异常值，并根据业务规则决定是否删除或修正这些值。</li><li>重复数据处理：比如数据集中存在重复的房屋记录。我们要删除重复记录，以确保每个房屋只有一个数据条目。</li><li>数据标准化：房屋价格可能使用了不同的货币单位。我们要统一所有价格数据的单位，以便进行比较和分析。</li></ul></li><li>特征工程：目标是从原始数据中提取有用的信息，创建新的特征，或者转换现有特征，以提高模型的性能。<ul><li>特征提取：例如数据集中没有包含房屋的“楼层”信息，但这可能对房价有影响。可以从房屋的描述字段中提取出“楼层”信息，并作为一个新特征添加到数据集中。</li><li>特征归一化：一些特征（如房屋面积和房龄）具有不同的量纲，这可能会影响模型训练。可以对特征进行标准化或归一化，以确保所有特征在相同的尺度上。</li></ul></li></ol><p>最终房屋价格可能与房屋面积、卧室数量、位置、房价、楼层等特征因素有关，我们再列出变量和数学关系。</p><h3 id="选择建模方法"><a href="#选择建模方法" class="headerlink" title="选择建模方法"></a>选择建模方法</h3><p>选择解决问题的一个一般的求解方法。一般地，这一步需要有一定的数学建模经验和技巧。同时需要熟悉相关的文献。要求我们对常见的数学模型和算法有一定的了解。下图列出来针对不同问题的常见模型。</p><h4 id="常用模型"><a href="#常用模型" class="headerlink" title="常用模型"></a>常用模型</h4><img src="/2024/07/24/2024-07-24/%E6%A8%A1%E5%9E%8B%E5%88%86%E7%B1%BB.jpg" class title="图2"><p>例如回归拟合预测模型就是房价预测中常用的一种方法。它通过建立一个数学模型来描述房价与其他特征变量（房屋面积、卧室数量、位置、房价、楼层）之间的关系，从而进行预测。</p><h4 id="常用的十大算法："><a href="#常用的十大算法：" class="headerlink" title="常用的十大算法："></a>常用的十大算法：</h4><ol><li><font color="yellow">蒙特卡罗算法</font>(该算法又称随机性模拟算法，是通过计算机仿真来解决问题的算法，同时可以通过模拟可以来检验自己模型的正确性，是比赛时必用的方法)</li><li><font color="yellow">数据拟合、参数估计、插值等数据处理算法</font>(比赛中通常会遇到大量的数据需要处理，而处理数据的关键就在于这些算法，通常使用Matlab作为工具)</li><li><font color="yellow">线性规划、整数规划、多元规划、二次规划等规划类问题</font>(建模竞赛大多数问题属于最优化问题，很多时候这些问题可以用数学规划算法来描述，通常使用Lindo、Lingo软件实现)</li><li><font color="yellow">图论算法</font>(这类算法可以分为很多种，包括最短路、网络流、二分图等算法，涉及到图论的问题可以用这些方法解决需要认真准备)</li><li><font color="yellow">动态规划、回溯搜索、分治算法、分支定界等计算机算法</font>(这些算法是算法设计中比较常用的方法，很多场合可以用到竞赛中）</li><li><font color="yellow">最优化理论的三大非经典算法:模拟退火法、神经网络、遗传算法</font>(这些问题是用来解决一些较困难的最优化问题的算法，对于有些问题非常有帮助，但是算法的实现比较困难，需慎重使用)</li><li><font color="yellow">网格算法和穷举法</font>(网格算法和穷举法都是暴力搜索最优点的算法，在很多竞赛题中有应用，当重点讨论模型本身而轻视算法的时候，可以使用这种暴力方案，最好使用一些高级语言作为编程工具)</li><li><font color="yellow">一些连续离散化方法</font>(很多问题都是实际来的，数据可以是连续的，而计算机只认的是离散的数据，因此将其离散化后进行差分代替微分、求和代替积分等思想是非常重要的)</li><li><font color="yellow">数值分析算法</font>(如果在比赛中采用高级语言进行编程的话，那一些数值分析中常用的算法比如方程组求解、矩阵运算、函数积分等算法就需要额外编写库函数进行调用)</li><li><font color="yellow">图象处理算法</font>(赛题中有一类问题与图形有关，即使与图形无关，论文中也应该要不乏图片的，这些图形如何展示以及如何处理就是需要解决的问题。</li></ol><h4 id="模型和算法之间的关系"><a href="#模型和算法之间的关系" class="headerlink" title="模型和算法之间的关系"></a>模型和算法之间的关系</h4><ol><li><strong>模型使用算法来实现和优化</strong>：<ul><li><strong>实现模型</strong>：许多模型的实现依赖于算法。例如，支持向量机（SVM）模型需要通过算法来找到最优的分割超平面。</li><li><strong>优化模型</strong>：优化模型中的参数或结构通常使用算法。例如，线性回归模型通过最小二乘算法来确定回归系数。</li></ul></li><li><strong>模型定义了问题，算法提供了解决方案</strong>：<ul><li><strong>模型定义</strong>：模型描述了问题的结构和关系。它定义了要分析的变量、参数及其相互作用。</li><li><strong>算法解决</strong>：算法提供了解决模型中问题的方法和步骤。例如，决策树模型定义了分类规则，而构建决策树的算法（如ID3或C4.5）决定了如何生成树结构。</li></ul></li><li><strong>模型和算法的结合</strong>：<ul><li><strong>模型构建</strong>：在构建模型时，需要选择和设计合适的算法来实现模型的功能。例如，在机器学习中，选择模型（如神经网络）时，需要应用相应的训练算法（如反向传播算法）。</li><li><strong>模型评估和优化</strong>：模型的效果可以通过算法来评估和优化。例如，交叉验证算法可以用来评估模型的性能，超参数优化算法（如网格搜索、随机搜索）可以用来调整模型的参数。</li></ul></li></ol><h3 id="推导模型的公式"><a href="#推导模型的公式" class="headerlink" title="推导模型的公式"></a>推导模型的公式</h3><p>将第一步中得到的问题重新表达成第二步选定的建模方法所需要的形式，从而<font color="yellow">构建模型</font>，确保第一步中的变量名与第二步的一致。记下任何补充假设，这些假设是为了使第一步中描述的问题与第二步中选定的数学结构相适应而做出的。</p><p>在椅子平稳性问题中，数学模型构建：已知f（θ）和g（θ）是θ的非负连续函数，对∀θ，f（θ）•g(θ)＝0，证明：∃θ0∈[0，π]，使得f（θ0）＝g（θ0）＝0成立。</p><p>在房价预测问题中，数学模型构建：通过线性函数用于建模多个自变量 x1,x2,……xp 和一个因变量 y 之间的线性关系。</p><img src="/2024/07/24/2024-07-24/image-20240724224309134.png" class title="图3"><p>其中自变量X可以表示房屋面积、卧室数量、位置、房价、楼层等特征变量，y是房价。</p><h3 id="求解模型"><a href="#求解模型" class="headerlink" title="求解模型"></a>求解模型</h3><p>将第二步中所选方法应用于第三步得到的表达式，再求解过程中注意数学推导，确保推导过程无误且结果有意义。并采用适当的方法扩大解决问题的范围并减少计算错误。</p><p>在椅子平稳性问题中，①若f（0）＝g（0）＝0，那么结论成立。②若f（0）与g（0）不同时为零，不妨设f（0）＞0，g（0）＝0。将长方形ABCD绕点O逆时针旋转角度π后，A，B与C，D互换，但长方形ABCD在地面上所处的位置不变，由此可知，f（π）＝g（0），g（π）＝f（0）.∴f（0）＞0，g（0）＝0 → g（π）＞0，f（π）＝0。</p><p>令h（θ）＝f(θ)－g（θ），由f(θ)和g(θ)的连续性知h(θ)也是连续函数。又h（0）＝f(0)－g（0）＞0，h（π）＝f(π)－g（π）＜0，根据连续函数介值定理，必存在θ0∈（0，π）使得h（θ0）＝0，即f（θ0）＝g（θ0） ；又因为f（θ0）•g（θ0）＝0，所以f（θ0）＝g（θ0）＝0。即四只脚同时着地，稳定。</p><p>在预测房价问题中，需要是预测的房价和真实的房价的误差趋于最小，使用最小二乘法作为损失函数优化模型，即使图中Q值趋于最小。也就是当梯度为零的时候取最小值。</p><img src="/2024/07/24/2024-07-24/image-20240724225420896.png" class title="图4"><img src="/2024/07/24/2024-07-24/image-20240724225449385.png" class title="图5"><p>这一过程需要对建模工具有一定的掌握。</p><ol><li><p>统计模型：SPSS,Eviews，Stata 。</p></li><li><p>数据分析：R，数据库SQL Server，IBM，DB2</p></li><li><p>微分方程：Maple, Mathematic, MATLAB</p></li><li><p>运筹规划：Matlab，Lingo</p></li><li><p>智能算法：Matlab，R</p></li><li><p>时间序列：R，Matlab</p></li><li><p>图像处理：Matlab，C++</p></li></ol><h3 id="回答问题"><a href="#回答问题" class="headerlink" title="回答问题"></a>回答问题</h3><p>最终在论文中我们需要用非技术性的语言将第四步的结果重新表述，表述过程中需要避免数学符号和术语。这部分是对你整篇论文成果的总结，一定要写的有深度。除此之外，通常还要写上一些灵敏度分析，如果是统计模型的话，要有模型检验。论文通常会需要画一些图表，可以使用Matlab、R等软件来画跟数据有关的图，使用Visio或者PPT画流程图之类的图。</p><p>在椅子平稳性问题中，椅子在旋转过程中，至少存在一个点能使椅子能在不平的地面上放稳。</p><p>在预测房价问题中，根据我们推导出的模型，当已知特征变量时，能够预测房屋价格。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在建模的五步法中，整个建模需要的工作包括：</p><ol><li>数据收集：要构建有效的模型，首先需要获得相关的数据。这些数据可以来自多种渠道。</li><li>数据清理：原始数据往往包含噪声、缺失值和异常值，因此在建模之前必须对数据进行清理。数据清理的过程包括：</li><li>特征工程：特征工程是指从原始数据中提取和构造有助于模型预测的特征</li><li>模型选择与建立：根据问题的性质和数据的特点，选择合适的数学或统计模型。常见的模型类型包括：</li><li>模型求解：在模型建立之后，需要对模型进行求解、训练和验证。</li><li>模型评估：评估模型的性能是检验模型有效性的重要步骤。</li><li>问题回答：用非技术语言解释模型的预测结果和模型的原理和假设等</li></ol><h2 id="必备知识"><a href="#必备知识" class="headerlink" title="必备知识"></a>必备知识</h2><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><ul><li><font color="yellow">高数、线性代数和概率论与统计基础。</font>在数学建模过程中我们要能够掌握函数的变化、极值、导数、积分等概念，对于优化问题和动态系统建模非常重要。而矩阵运算、特征值、特征向量、线性方程组等概念在处理数据、优化问题和统计分析中至关重要。同时还需要处理不确定性和随机性，涉及概率分布、期望值、方差、假设检验等问题。</li><li><font color="yellow">掌握常见模型和算法。</font>只有对常见模型和算法有一定的了解，才能在选择解决问题的一个一般的求解方法时，找到合适和模型。不一定要对模型有很深的了解，但要知道不同模型能够用在哪些问题上。</li></ul><h3 id="编程代码"><a href="#编程代码" class="headerlink" title="编程代码"></a>编程代码</h3><ul><li><strong>Matlab</strong>：交互式编程软件，将海量算法或工具进行封存，能仿真、能绘图、能求解，可直接调用。</li><li><strong>Python</strong>：主要针对机器学习算法和深度学习，以及数据分析是非常方便的。</li><li><strong>SPSS</strong>：专业的统计数据分析软件，有大量统计模型可直接使用。</li><li><strong>Lingo</strong>：交互式的线性和通用优化求解器，可以用于求解各类规划模型。</li></ul><h3 id="写作排版"><a href="#写作排版" class="headerlink" title="写作排版"></a>写作排版</h3><ul><li><strong>WORD(或WPS)</strong>:论文写作专用，并可以导成PDF格式</li><li><strong>EXCEL</strong>:分析数据、并绘制数据走势图等精美图片Mathtype:公式编辑器，用于编写各类数学公式和特殊符号</li><li><strong>Mathpix</strong>:公式提取软件，用于将其他论文的公式提取到自己论文中</li><li><strong>Checker</strong>:英文文章语言免费检查软件，可分析语法、拼写等错误</li><li><strong>LaTeX</strong>:论文排版软件，主要利用编程语言对论文进行排版</li></ul><h3 id="文献检索"><a href="#文献检索" class="headerlink" title="文献检索"></a>文献检索</h3><p>文献检索也是很重要的，数模竞赛题目往往具有一定的专业性，需要学会查到相关领域的论文并加以利用。</p><h2 id="建模比赛"><a href="#建模比赛" class="headerlink" title="建模比赛"></a>建模比赛</h2><p>只有参加比赛在实践中才能帮助我们快速提升，通过比赛熟悉从数据收集、建立模型到论文撰写的整个流程；提示文献查阅、工具使用和代码编写的能力；感受团队协作、学术讨论、全力以赴的氛围。刚开始的时候要端正好心态，不要盲目的追求获奖，以学习练兵为目标。</p><h3 id="如何组队"><a href="#如何组队" class="headerlink" title="如何组队"></a>如何组队</h3><p>建模比赛都是是三个人组队，一般来说为：一人负责编程、一人负责建模、一人负责论文。</p><p>队长通常由建模手担任，需要具备的是<strong>领导力、沟通协调能力、时间管理能力和决策能力</strong>。他不仅要掌控比赛进度，建立有效的沟通机制，合理分配各阶段的任务和时间，还要激发团队士气，综合团队意见，做出明智的决策。</p><p>建模手的首要任务深入解析题目要求，确保对问题的全面准确理解。随后需<strong>广泛搜集并研读相关领域的最新文献</strong>，提炼出关键的研究方法和理论框架。基于这些资料<strong>设计并构建数学模型</strong>，明确模型假设、参数设定及逻辑推导过程，形成模型初稿。在编程手和写作手的反馈下不断<strong>迭代优化模型</strong>，确保其既符合题目要求又便于编程实现和论文撰写。</p><p>赛前，写作手要<strong>熟悉论文写作规范</strong>，准备好论文模板和必要的写作工具（如Word、LaTeX）。根据建模手提供的模型初稿和深入分析，展开详细的论述，包括背景介绍、文献综述、模型构建、结果分析等多个部分，确保论文内容充实、逻辑严谨。在编程手完成编程工作后，将<strong>结合编程结果和模型理论</strong>，进行深入的分析和讨论，提升论文的学术价值和说服力。最后<strong>全面审查论文</strong>，修正语法错误、优化排版布局，确保论文的整洁美观。</p><p>编程要<strong>做好技术准备</strong>，赛前熟练掌握至少一种编程语言（如Python、MATLAB）并安装调试好运行环境。在明确建模手M的模型求解需求后，要<strong>迅速制定编程方案</strong>，编写高效、准确的代码来实现模型求解。在编程过程中应<strong>注重代码的可读性和可维护性</strong>，并在适当位置添加注释和输出中间结果，以便于调试和后续分析。在编程完成后，<strong>整理编程结果</strong>，并将其转化为易于理解和分析的表格、图形等形式，为写作手提供有力的数据支持。</p><h3 id="数学建模比赛"><a href="#数学建模比赛" class="headerlink" title="数学建模比赛"></a>数学建模比赛</h3><img src="/2024/07/24/2024-07-24/ed05abae7f4a47958d3243172a469d29_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" class title="图6"><blockquote><p>图片来源：<a href="https://blog.csdn.net/weixin_61644243/article/details/136262876">https://blog.csdn.net/weixin_61644243/article/details/136262876</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>数学分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端学习-ECharts使用（2）</title>
    <link href="/2024/07/23/2024-07-23/"/>
    <url>/2024/07/23/2024-07-23/</url>
    
    <content type="html"><![CDATA[<p>文章介绍了EChats图表构建中Axis、Grid、Legend、Tooltip的常见用法。</p><span id="more"></span><h1 id="前端学习-ECharts的使用（2）"><a href="#前端学习-ECharts的使用（2）" class="headerlink" title="前端学习-ECharts的使用（2）"></a>前端学习-ECharts的使用（2）</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><p>本文以下面代码为初始状态进行分析ECharts配置项的基本使用，我们总结了常用的配置项，并尽量总结了它们之间的联系，<font color="yellow">当然在使用的时候我们还是需要结合官方的API文档和配置项文档使用</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> dataX=[];<br><span class="hljs-keyword">let</span> dataY1=[];<br><span class="hljs-keyword">let</span> dataY2=[];<br><span class="hljs-keyword">let</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;count&lt;<span class="hljs-number">20</span>;count++)&#123;<br>  dataX.<span class="hljs-title function_">push</span>((count+<span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>());<br>  dataY2.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>  dataY1.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>&#125;<br><br>option=&#123;<br>  <span class="hljs-attr">textStyle</span>:&#123;<br>    <span class="hljs-attr">fontFamily</span>:<span class="hljs-string">&quot;STZhongsong&quot;</span>,<br>    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">title</span>:&#123;<br>    <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;2024-07-23&quot;</span>,<br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">subtext</span>:<span class="hljs-string">&quot;-- by Xiang&quot;</span><br>  &#125;,<br>  <span class="hljs-comment">//XY轴</span><br>  <span class="hljs-attr">xAxis</span>:&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,<br>    <span class="hljs-attr">data</span>:dataX,<br>  &#125;,<br>  <span class="hljs-attr">yAxis</span>:[<br>    &#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>    <span class="hljs-attr">min</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">max</span>:<span class="hljs-number">2</span>,<br>    &#125;,<br>  ],<br>  <span class="hljs-comment">//数据系列</span><br>  <span class="hljs-attr">series</span>:[<br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;line1&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,<br>      <span class="hljs-attr">data</span>:dataY1,<br>      <span class="hljs-attr">smooth</span>:<span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">areaStyle</span>:&#123;&#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;line2&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;line&quot;</span>,<br>      <span class="hljs-attr">data</span>:dataY2,<br>      <span class="hljs-attr">smooth</span>:<span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">areaStyle</span>:&#123;&#125;<br>    &#125;<br>  ],<br>  <span class="hljs-comment">//图例</span><br>  <span class="hljs-attr">legend</span>:&#123;<br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;grey&quot;</span>,<br>    <span class="hljs-attr">data</span>:[<span class="hljs-string">&quot;line1&quot;</span>,<span class="hljs-string">&#x27;line2&#x27;</span>],<br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">fontSize</span>:<span class="hljs-number">20</span>,<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">//提示框</span><br>  <span class="hljs-attr">tooltip</span>:&#123;<br>    <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;axis&quot;</span>,<br>    <span class="hljs-attr">axisPointer</span>:&#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;cross&quot;</span>,<br>      <span class="hljs-attr">label</span>:&#123;<br>        <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;grey&quot;</span>,<br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>得到效果图如下：</p><img src="/2024/07/23/2024-07-23/%E5%9B%BE1.png" class title="图1"><h2 id="ECharts-Axis配置项"><a href="#ECharts-Axis配置项" class="headerlink" title="ECharts Axis配置项"></a>ECharts Axis配置项</h2><p><font color="yellow">Axis常用配置项的汇总如下：</font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>string</code></td><td>坐标轴类型：’value’（数值轴）、’category’（类目轴）、’time’（时间轴）、’log’（对数轴）。<font color="yellow">横坐标通常是用’category’，纵坐标更多使用’value’</font>。</td></tr><tr><td><code>position</code></td><td><code>string</code></td><td>坐标轴的位置：’top’、’bottom’、’left’、’right’。</td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>坐标轴的名称。</td></tr><tr><td><code>nameLocation</code></td><td><code>string</code></td><td>坐标轴名称显示位置：’start’、’middle’、’end’。</td></tr><tr><td><code>nameTextStyle</code></td><td><code>Object</code></td><td>坐标轴名称的文字样式。</td></tr><tr><td><code>nameGap</code></td><td><code>number</code></td><td>坐标轴名称与轴线之间的距离。</td></tr><tr><td><code>nameRotate</code></td><td><code>number</code></td><td>坐标轴名字旋转角度。</td></tr><tr><td><code>inverse</code></td><td><code>boolean</code></td><td>是否是反向坐标轴。</td></tr><tr><td><code>boundaryGap</code></td><td><code>boolean</code>&#x2F;<code>Array</code></td><td>类目轴中类目之间的间距或数值轴的起始和结束位置。<font color="yellow">横坐标设置boundratGap为false，则图表紧贴y坐标轴。</font></td></tr><tr><td><code>min</code></td><td><code>number</code>&#x2F;<code>string</code>&#x2F;<code>Function</code></td><td>坐标轴刻度最小值。可以设置具体值，或设置为 ‘dataMin’。</td></tr><tr><td><code>max</code></td><td><code>number</code>&#x2F;<code>string</code>&#x2F;<code>Function</code></td><td>坐标轴刻度最大值。可以设置具体值，或设置为 ‘dataMax’。</td></tr><tr><td><code>scale</code></td><td><code>boolean</code></td><td>只在数值轴中（type: ‘value’）有效，是否是脱离 0 值比例。</td></tr><tr><td><code>splitNumber</code></td><td><code>number</code></td><td>坐标轴的分割段数。</td></tr><tr><td><code>minInterval</code></td><td><code>number</code></td><td>自动计算的坐标轴最小间隔大小。</td></tr><tr><td><code>maxInterval</code></td><td><code>number</code></td><td>自动计算的坐标轴最大间隔大小。</td></tr><tr><td><code>interval</code></td><td><code>number</code></td><td>强制设置坐标轴分割间隔。</td></tr><tr><td><code>logBase</code></td><td><code>number</code></td><td>对数轴的底数，只在对数轴中（type: ‘log’）有效。</td></tr><tr><td><code>silent</code></td><td><code>boolean</code></td><td>坐标轴是否静默。<font color="yellow">当设置为 <code>true</code> 时，该元素将不响应任何交互事件。</font></td></tr><tr><td><code>triggerEvent</code></td><td><code>boolean</code></td><td>坐标轴的标签是否触发鼠标事件。</td></tr><tr><td><code>axisLine</code></td><td><code>Object</code></td><td>坐标轴轴线的相关设置。</td></tr><tr><td><code>axisTick</code></td><td><code>Object</code></td><td>坐标轴刻度相关设置。</td></tr><tr><td><code>axisLabel</code></td><td><code>Object</code></td><td>坐标轴刻度标签的相关设置。</td></tr><tr><td><code>splitLine</code></td><td><code>Object</code></td><td>坐标轴在 grid 区域中的分隔线。</td></tr><tr><td><code>splitArea</code></td><td><code>Object</code></td><td>坐标轴在 grid 区域中的分隔区域，默认不显示。</td></tr><tr><td><code>data</code></td><td><code>Array</code></td><td>类目数据，在类目轴（type: ‘category’）中有效。</td></tr><tr><td><code>axisPointer</code></td><td><code>Object</code></td><td>坐标轴指示器配置项。</td></tr><tr><td><code>zlevel</code></td><td><code>number</code></td><td>组件的所有图形的 zlevel 值。</td></tr><tr><td><code>z</code></td><td><code>number</code></td><td>组件的所有图形的 z 值。</td></tr></tbody></table><h3 id="图片翻转"><a href="#图片翻转" class="headerlink" title="图片翻转"></a>图片翻转</h3><ul><li>配置项<code>inverse</code></li></ul><img src="/2024/07/23/2024-07-23/%E5%9B%BE2.png" class title="图2"><p>我们修改上述代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">yAxis</span>:[<br>    &#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>        <span class="hljs-attr">min</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">max</span>:<span class="hljs-number">2</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>        <span class="hljs-attr">min</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">max</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">inverse</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//反向第二条坐标轴</span><br>    &#125;<br>],<br><span class="hljs-attr">series</span>:[<br>    &#123;...&#125;,<br>    &#123;...<br>    <span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">1</span>, <span class="hljs-comment">//将数据系列二绑定在第二条坐标轴，实现系列二反转。</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="坐标旋转"><a href="#坐标旋转" class="headerlink" title="坐标旋转"></a>坐标旋转</h3><img src="/2024/07/23/2024-07-23/%E5%9B%BE3.png" class title="图3"><p><font color="yellow">只需互换xAxis和yAxis即可。</font></p><h3 id="分割段设置"><a href="#分割段设置" class="headerlink" title="分割段设置"></a>分割段设置</h3><ul><li>配置项：<code>splitLine</code>、<code>interval</code>、<code>splitnumber</code></li></ul><img src="/2024/07/23/2024-07-23/%E5%9B%BE4.png" class title="图4"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">xAxis</span>:&#123;<br>    <span class="hljs-attr">splitLine</span>:&#123;<br>        <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">interval</span>:<span class="hljs-number">3</span>, <span class="hljs-comment">//设置两根分割段之间的间隔</span><br>        <span class="hljs-attr">spliteNumber</span>: <span class="hljs-number">4</span>,<span class="hljs-comment">//分割段数量，与interval可能发生冲突</span><br>        <span class="hljs-attr">lineStyle</span>:&#123; <span class="hljs-comment">//样式设计</span><br>            <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>splitArea的用法和splitLine相似。</p><h3 id="坐标轴渲染"><a href="#坐标轴渲染" class="headerlink" title="坐标轴渲染"></a>坐标轴渲染</h3><p>配置项：<code>axisTick</code>、<code>axisLine</code>、<code>axisLabel</code>、<code>name</code>、<code>nameStyle</code>、<code>nameLocation</code></p><p>坐标轴的渲染包括坐标轴刻度线、坐标轴轴线、坐标轴轴标签以及坐标轴名字的渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">xAxis</span>:&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;横坐标&quot;</span>，<br>    <span class="hljs-attr">nameLocation</span>:<span class="hljs-string">&quot;middle&quot;</span> <span class="hljs-comment">//名字位置在中间</span><br>    <span class="hljs-attr">nameGap</span>: <span class="hljs-number">20</span>, <span class="hljs-comment">//名字与轴标签的距离</span><br>    <span class="hljs-attr">nameRotate</span>:<span class="hljs-number">45</span>, <span class="hljs-comment">//名字旋转角度</span><br>    <span class="hljs-attr">nameStyle</span>:&#123;<br>        <span class="hljs-comment">//样式</span><br>        <span class="hljs-attr">padding</span>:<span class="hljs-number">20</span>,<br>    &#125;<br>    <span class="hljs-comment">//坐标轴刻度线。</span><br>    <span class="hljs-attr">axisTick</span>:&#123;<br>        <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">inside</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//标签是否向内部</span><br>        <span class="hljs-attr">length</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">//刻度线长度</span><br>        <span class="hljs-attr">alignWithLabel</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//刻度线是否需标签对齐</span><br>        <span class="hljs-attr">inverval</span>:<span class="hljs-string">&quot;auto&quot;</span>，<span class="hljs-comment">//刻度线分布</span><br>        <span class="hljs-attr">lineStyle</span>:&#123; <span class="hljs-comment">//样式设置</span><br>            <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//坐标轴轴线</span><br>    <span class="hljs-attr">axisLine</span>:&#123;<br>        <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">lineStyle</span>:&#123;<br>            <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>, <br>        &#125;<br>        <span class="hljs-attr">symbol</span>:<span class="hljs-string">&quot;arrow&quot;</span> <span class="hljs-comment">//箭头</span><br>    &#125;<br>    <span class="hljs-comment">//坐标轴轴标签</span><br>    <span class="hljs-attr">axisLabel</span>:&#123;<br>        <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">interval</span>:<span class="hljs-string">&quot;auto&quot;</span>，<span class="hljs-comment">//标签分布。</span><br>        <span class="hljs-attr">textStyle</span>:&#123;<br>            <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><img src="/2024/07/23/2024-07-23/%E5%9B%BE5.png" class title="图5"><p>更加详细的配置项如下：</p><p><font color="yellow"><strong><code>axisTick</code> 配置项总结表：</strong></font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示坐标轴刻度。</td></tr><tr><td><code>alignWithLabel</code></td><td><code>boolean</code></td><td>刻度线和标签对齐。仅在类目轴中有效。</td></tr><tr><td><code>interval</code></td><td><code>string</code>&#x2F;<code>number</code>&#x2F;<code>Function</code></td><td>坐标轴刻度的显示间隔，默认为 ‘auto’。</td></tr><tr><td><code>inside</code></td><td><code>boolean</code></td><td>坐标轴刻度是否朝内。</td></tr><tr><td><code>length</code></td><td><code>number</code></td><td>坐标轴刻度的长度。</td></tr><tr><td><code>lineStyle</code></td><td><code>Object</code></td><td>坐标轴刻度的样式，包括颜色、宽度、类型等。</td></tr></tbody></table><p><font color="yellow"><strong><code>axisLine</code> 配置项总结表：</strong></font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示坐标轴轴线。</td></tr><tr><td><code>onZero</code></td><td><code>boolean</code></td><td>X 轴 Y 轴相交于 0 刻度。仅在双数值轴中有效。</td></tr><tr><td><code>onZeroAxisIndex</code></td><td><code>number</code></td><td>使用的另一个坐标轴的 axisIndex。仅在双数值轴中有效。</td></tr><tr><td><code>symbol</code></td><td><code>string</code>&#x2F;<code>Array</code></td><td>轴线两头的箭头。 <code>&#39;circle&#39;</code>：圆形；<code>&#39;rect&#39;</code>：矩形；<code>&#39;roundRect&#39;</code>：圆角矩形；<code>&#39;triangle&#39;</code>：三角形；<code>&#39;diamond&#39;</code>：菱形；<code>&#39;pin&#39;</code>：图钉形状；<code>&#39;arrow&#39;</code>：箭头形状；<code>&#39;path://...&#39;</code>：自定义路径</td></tr><tr><td><code>symbolSize</code></td><td><code>Array</code></td><td>轴线两头箭头的大小。</td></tr><tr><td><code>symbolOffset</code></td><td><code>Array</code></td><td>轴线两头箭头的偏移。</td></tr><tr><td><code>lineStyle</code></td><td><code>Object</code></td><td>坐标轴线的样式，包括颜色、宽度、类型等。</td></tr></tbody></table><p><font color="yellow"><strong><code>axisLabel</code> 配置项总结表：</strong></font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示坐标轴刻度标签。</td></tr><tr><td><code>interval</code></td><td><code>string</code>&#x2F;<code>number</code>&#x2F;<code>Function</code></td><td>坐标轴刻度标签的显示间隔，默认为 ‘auto’。</td></tr><tr><td><code>inside</code></td><td><code>boolean</code></td><td>坐标轴刻度标签是否朝内。</td></tr><tr><td><code>rotate</code></td><td><code>number</code></td><td>坐标轴刻度标签的旋转角度。</td></tr><tr><td><code>margin</code></td><td><code>number</code></td><td>刻度标签与轴线之间的距离。</td></tr><tr><td><code>formatter</code></td><td><code>string</code>&#x2F;<code>Function</code></td><td>刻度标签的内容格式器。</td></tr><tr><td><code>showMinLabel</code></td><td><code>boolean</code></td><td>是否显示最小刻度标签。</td></tr><tr><td><code>showMaxLabel</code></td><td><code>boolean</code></td><td>是否显示最大刻度标签。</td></tr><tr><td><code>color</code></td><td><code>string</code></td><td>刻度标签文字的颜色。</td></tr><tr><td><code>fontStyle</code></td><td><code>string</code></td><td>刻度标签文字的字体风格。</td></tr><tr><td><code>fontWeight</code></td><td><code>string</code></td><td>刻度标签文字的字体粗细。</td></tr><tr><td><code>fontFamily</code></td><td><code>string</code></td><td>刻度标签文字的字体系列。</td></tr><tr><td><code>fontSize</code></td><td><code>number</code></td><td>刻度标签文字的字体大小。</td></tr><tr><td><code>align</code></td><td><code>string</code></td><td>刻度标签文字水平对齐方式。</td></tr><tr><td><code>verticalAlign</code></td><td><code>string</code></td><td>刻度标签文字垂直对齐方式。</td></tr><tr><td><code>lineHeight</code></td><td><code>number</code></td><td>刻度标签文字的行高。</td></tr><tr><td><code>backgroundColor</code></td><td><code>string</code>&#x2F;<code>Object</code></td><td>刻度标签背景色。</td></tr><tr><td><code>borderColor</code></td><td><code>string</code></td><td>刻度标签边框颜色。</td></tr><tr><td><code>borderWidth</code></td><td><code>number</code></td><td>刻度标签边框宽度。</td></tr><tr><td><code>borderRadius</code></td><td><code>number</code>&#x2F;<code>Array</code></td><td>刻度标签边框圆角。</td></tr><tr><td><code>padding</code></td><td><code>number</code>&#x2F;<code>Array</code></td><td>刻度标签内边距。</td></tr><tr><td><code>shadowColor</code></td><td><code>string</code></td><td>刻度标签文字的阴影颜色。</td></tr><tr><td><code>shadowBlur</code></td><td><code>number</code></td><td>刻度标签文字的阴影模糊度。</td></tr><tr><td><code>shadowOffsetX</code></td><td><code>number</code></td><td>刻度标签文字的阴影水平偏移。</td></tr><tr><td><code>shadowOffsetY</code></td><td><code>number</code></td><td>刻度标签文字的阴影垂直偏移。</td></tr><tr><td><code>textBorderColor</code></td><td><code>string</code></td><td>刻度标签文字的描边颜色。</td></tr><tr><td><code>textBorderWidth</code></td><td><code>number</code></td><td>刻度标签文字的描边宽度。</td></tr><tr><td><code>textShadowColor</code></td><td><code>string</code></td><td>刻度标签文字的阴影颜色。</td></tr><tr><td><code>textShadowBlur</code></td><td><code>number</code></td><td>刻度标签文字的阴影模糊度。</td></tr><tr><td><code>textShadowOffsetX</code></td><td><code>number</code></td><td>刻度标签文字的阴影水平偏移。</td></tr><tr><td><code>textShadowOffsetY</code></td><td><code>number</code></td><td>刻度标签文字的阴影垂直偏移。</td></tr></tbody></table><p><strong><font color="yellow">注意点：</font></strong></p><ol><li>axisTick和axisLabel的<code>interval</code>用于显示标签和刻度线之间的间隔。<ul><li>axisLabel默认值为<code>auto</code>，系统根据标签名自动调整标签之间的间隔。</li><li>axisLabel值为0，默认显示所有的的标签，值为n，则每隔n个数据项显示一个标签。</li><li>axisLine默认值为<code>auto</code>，系统根据标签名自动调整刻度线之间的间隔。</li><li>axisLine值为0，默认显示和标签数量相同的刻度线，值为n，则每隔n个标签显示一个刻度线。</li></ul></li><li><font color="yellow">axisLabel的<code>interval</code>只适用于<code>category</code>类别轴，如果轴是<code>value</code>，数值是连续的，则<code>interval</code>不起作用</font>。标签的数量由分割线的数量决定。通过<code>splitLine</code>样式设置分割线数量。</li><li>axisLabel的样式配置可以直接在组件元素中配置，也可以在<code>textStyle</code>在配置。</li></ol><h2 id="ECharts-Grid配置项"><a href="#ECharts-Grid配置项" class="headerlink" title="ECharts Grid配置项"></a>ECharts Grid配置项</h2><p><code>grid</code>配置项在ECharts中用于设置图表的网络布局和样式，用于控制图表的坐标轴区域。一个容器可以放置多个网格<code>grid</code>，不同网站中可以绘制不同的坐标轴。</p><p><font color="yellow">Grid常用配置项的汇总如下：</font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示 grid 组件。</td></tr><tr><td><code>left</code></td><td><code>number</code>&#x2F;<code>string</code></td><td>grid 区域离容器左侧的距离，可以是百分比或者像素值。</td></tr><tr><td><code>right</code></td><td><code>number</code>&#x2F;<code>string</code></td><td>grid 区域离容器右侧的距离，可以是百分比或者像素值。</td></tr><tr><td><code>top</code></td><td><code>number</code>&#x2F;<code>string</code></td><td>grid 区域离容器顶部的距离，可以是百分比或者像素值。</td></tr><tr><td><code>bottom</code></td><td><code>number</code>&#x2F;<code>string</code></td><td>grid 区域离容器底部的距离，可以是百分比或者像素值。</td></tr><tr><td><code>containLabel</code></td><td><code>boolean</code></td><td>是否包含坐标轴标签在 grid 区域内。</td></tr><tr><td><code>backgroundColor</code></td><td><code>string</code>&#x2F;<code>Object</code></td><td>grid 区域的背景颜色。</td></tr><tr><td><code>borderColor</code></td><td><code>string</code></td><td>grid 区域的边框颜色。</td></tr><tr><td><code>borderWidth</code></td><td><code>number</code></td><td>grid 区域的边框宽度。</td></tr><tr><td><code>shadowColor</code></td><td><code>string</code></td><td>grid 区域的阴影颜色。</td></tr><tr><td><code>shadowBlur</code></td><td><code>number</code></td><td>grid 区域的阴影模糊度。</td></tr><tr><td><code>shadowOffsetX</code></td><td><code>number</code></td><td>grid 区域阴影的水平偏移。</td></tr><tr><td><code>shadowOffsetY</code></td><td><code>number</code></td><td>grid 区域阴影的垂直偏移。</td></tr><tr><td><code>height</code></td><td><code>number</code>&#x2F;<code>string</code></td><td>grid 区域的高度，可以是百分比或者像素值。</td></tr><tr><td><code>width</code></td><td><code>number</code>&#x2F;<code>string</code></td><td>grid 区域的宽度，可以是百分比或者像素值。</td></tr><tr><td><code>containLabel</code></td><td><code>boolean</code></td><td>是否使 grid 区域包含坐标轴标签，避免标签被截断。</td></tr><tr><td><code>opacity</code></td><td><code>number</code></td><td>grid 区域的透明度，取值范围 0~1。</td></tr></tbody></table><h3 id="多重网格"><a href="#多重网格" class="headerlink" title="多重网格"></a>多重网格</h3><img src="/2024/07/23/2024-07-23/%E5%9B%BE6.png" class title="图6"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在文章开头代码的基础上进行修改。</span><br><span class="hljs-keyword">const</span> option=&#123;<br>    <span class="hljs-attr">grid</span>:[<br>        &#123;<br>            <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化为false,</span><br>            <span class="hljs-attr">left</span>:<span class="hljs-string">&quot;5%&quot;</span>,<br>            <span class="hljs-attr">right</span>:<span class="hljs-string">&quot;5%&quot;</span>,<br>            <span class="hljs-attr">containLabel</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//包含了轴标签</span><br>            <span class="hljs-attr">height</span>:<span class="hljs-string">&quot;35%&quot;</span>, <span class="hljs-comment">//网络高度</span><br>            <span class="hljs-comment">//设置网络样式，前提是show为true.</span><br>            <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.7</span>, <span class="hljs-comment">//透明度</span><br>            <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<br>            <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">200</span>, <span class="hljs-comment">//阴影模糊程度</span><br>            <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&quot;yellow&quot;</span>,<br>            <span class="hljs-attr">shadomOffsetX</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//阴影偏移</span><br>            <span class="hljs-attr">shadomOffsetY</span>:<span class="hljs-number">0</span>,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-comment">//网络二</span><br>            <span class="hljs-attr">show</span>:<span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">left</span>:<span class="hljs-string">&quot;5%&quot;</span>,<br>            <span class="hljs-attr">right</span>:<span class="hljs-string">&quot;5%&quot;</span><br>            <span class="hljs-attr">containLabel</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">top</span>:<span class="hljs-string">&quot;50%&quot;</span>,<br>            <span class="hljs-attr">height</span>:<span class="hljs-string">&quot;35%&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-comment">//XY轴</span><br>  <span class="hljs-attr">xAxis</span>:[&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,<br>    <span class="hljs-attr">data</span>:dataX,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">gridIndex</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//绑定网络二</span><br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,<br>    <span class="hljs-attr">data</span>:dataX,<br>    <span class="hljs-attr">position</span>:<span class="hljs-string">&quot;top&quot;</span>,<br>  &#125;<br>  ],<br>  <span class="hljs-attr">yAxis</span>:[&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>    <span class="hljs-attr">min</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">max</span>:<span class="hljs-number">1</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>      <span class="hljs-attr">min</span>:<span class="hljs-number">0</span>,<br>      <span class="hljs-attr">max</span>:<span class="hljs-number">1</span>,<br>      <span class="hljs-attr">inverse</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//坐标反转</span><br>      <span class="hljs-attr">gridIndex</span>:<span class="hljs-number">1</span>, <span class="hljs-comment">//绑定网络二</span><br>    &#125;<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ECharts图表元素的位置调整"><a href="#ECharts图表元素的位置调整" class="headerlink" title="ECharts图表元素的位置调整"></a>ECharts图表元素的位置调整</h2><p>如<code>grid</code>的位置调整一样，<font color="yellow">ECharts大部分图表元素都是通过<code>top</code>，<code>bottom</code>，<code>left</code>，<code>right</code>四个配置项来调整组件元素在图表或者网络中的位置。</font>也就是元素上下左右的间距。</p><p>配置项的值类型有：</p><ul><li><code>number</code>：以像素为单位的绝对值。<code>top=20</code>即20px像素。</li><li><code>string</code>：父容器高度或者宽度的百分比。<code>top=&quot;20%&quot;</code>即相对于父容器宽度的20%大小。</li><li><code>auto</code>：自动计算位置，通常在响应式布局中使用。<code>top=&quot;auto&quot;</code>。</li><li><code>center</code>：将元素垂直居中（在某些配置中支持）。</li></ul><h2 id="ECharts-Label配置项"><a href="#ECharts-Label配置项" class="headerlink" title="ECharts Label配置项"></a>ECharts Label配置项</h2><p>ECharts很多元素都有是有标签或者说类似文本框属性，例如轴标签、legend标签、title标签，因此它们有很多通用的配置项。而在<code>series.label</code>和<code>axis.axisLabel</code>就有Label配置项，基本会涵盖所有的配置项。</p><p><font color="yellow">ECharts Label 配置项总结表</font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示标签。</td></tr><tr><td><code>position</code></td><td><code>string</code></td><td>标签的位置，支持 <code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>、<code>inside</code>、<code>insideLeft</code>、<code>insideRight</code>、<code>insideTop</code>、<code>insideBottom</code>。<font color="yellow">在series中起作用</font>。</td></tr><tr><td><code>formatter</code></td><td><code>string</code>&#x2F;<code>Function</code></td><td>标签内容格式器，可以是字符串模板或者回调函数。</td></tr><tr><td><code>color</code></td><td><code>string</code></td><td>标签文字颜色。</td></tr><tr><td><code>fontStyle</code></td><td><code>string</code></td><td>标签文字风格，例如 <code>&#39;normal&#39;</code>、<code>&#39;italic&#39;</code>、<code>&#39;oblique&#39;</code>。</td></tr><tr><td><code>fontWeight</code></td><td><code>string</code></td><td>标签文字粗细，例如 <code>&#39;normal&#39;</code>、<code>&#39;bold&#39;</code>。</td></tr><tr><td><code>fontFamily</code></td><td><code>string</code></td><td>标签文字字体，例如 <code>&#39;sans-serif&#39;</code>、<code>&#39;serif&#39;</code>。</td></tr><tr><td><code>fontSize</code></td><td><code>number</code></td><td>标签文字大小。</td></tr><tr><td><code>lineHeight</code></td><td><code>number</code></td><td>标签文字行高。</td></tr><tr><td><code>backgroundColor</code></td><td><code>string</code></td><td>标签的背景颜色。</td></tr><tr><td><code>borderColor</code></td><td><code>string</code></td><td>标签的边框颜色。</td></tr><tr><td><code>borderWidth</code></td><td><code>number</code></td><td>标签的边框宽度。</td></tr><tr><td><code>borderRadius</code></td><td><code>number</code></td><td>标签的边框圆角。</td></tr><tr><td><code>padding</code></td><td><code>number</code>&#x2F;<code>Array</code></td><td>标签的内边距。</td></tr><tr><td><code>shadowColor</code></td><td><code>string</code></td><td>标签的阴影颜色。</td></tr><tr><td><code>shadowBlur</code></td><td><code>number</code></td><td>标签的阴影模糊度。</td></tr><tr><td><code>shadowOffsetX</code></td><td><code>number</code></td><td>标签阴影的水平偏移。</td></tr><tr><td><code>shadowOffsetY</code></td><td><code>number</code></td><td>标签阴影的垂直偏移。</td></tr></tbody></table><p>可以看到这些配置项几乎在<code>grid</code>中都存在，在后面我们会看到很多元素都具备这些配置项。</p><h2 id="ECharts-Legend配置项"><a href="#ECharts-Legend配置项" class="headerlink" title="ECharts Legend配置项"></a>ECharts Legend配置项</h2><p><font color="yellow">Legend 常用属性总结表：</font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示图例，默认为 <code>true</code>。</td></tr><tr><td><code>type</code></td><td><code>string</code></td><td>图例类型，可选 <code>&#39;plain&#39;</code>（普通图例）或 <code>&#39;scroll&#39;</code>（可滚动图例）。</td></tr><tr><td><code>data</code></td><td><code>Array</code></td><td>图例的数据项，可以是字符串数组或对象数组，每个字符串或对象代表一个系列。</td></tr><tr><td><code>selected</code></td><td><code>Object</code></td><td>图例选中状态，用于控制哪些系列被选中（显示）或未选中（隐藏）。</td></tr><tr><td><code>orient</code></td><td><code>string</code></td><td>图例的布局朝向，可选 <code>&#39;horizontal&#39;</code>（水平）或 <code>&#39;vertical&#39;</code>（垂直）。</td></tr><tr><td><code>left</code></td><td><code>string</code>&#x2F;<code>number</code></td><td>图例组件离容器左侧的距离，可以是具体的像素值或相对百分比。</td></tr><tr><td><code>right</code></td><td><code>string</code>&#x2F;<code>number</code></td><td>图例组件离容器右侧的距离，可以是具体的像素值或相对百分比。</td></tr><tr><td><code>top</code></td><td><code>string</code>&#x2F;<code>number</code></td><td>图例组件离容器上侧的距离，可以是具体的像素值或相对百分比。</td></tr><tr><td><code>bottom</code></td><td><code>string</code>&#x2F;<code>number</code></td><td>图例组件离容器下侧的距离，可以是具体的像素值或相对百分比。</td></tr><tr><td><code>align</code></td><td><code>string</code></td><td>图例标记和文本的对齐方式，可选 <code>&#39;auto&#39;</code>，<code>&#39;left&#39;</code>，<code>&#39;right&#39;</code>。</td></tr><tr><td><code>padding</code></td><td><code>number</code>&#x2F;<code>Array</code></td><td>图例的内边距，单位为像素。可以是单个值或数组（分别表示上、右、下、左的内边距）。</td></tr><tr><td><code>itemGap</code></td><td><code>number</code></td><td>图例项之间的间隔，单位为像素。</td></tr><tr><td><code>itemWidth</code></td><td><code>number</code></td><td>图例标记的宽度，单位为像素。</td></tr><tr><td><code>itemHeight</code></td><td><code>number</code></td><td>图例标记的高度，单位为像素。</td></tr><tr><td><code>textStyle</code></td><td><code>Object</code></td><td>图例文本的样式，包括颜色、字体、大小等。</td></tr><tr><td><code>backgroundColor</code></td><td><code>string</code></td><td>图例的背景颜色。</td></tr><tr><td><code>borderColor</code></td><td><code>string</code></td><td>图例的边框颜色。</td></tr><tr><td><code>borderWidth</code></td><td><code>number</code></td><td>图例的边框线宽。</td></tr><tr><td><code>borderRadius</code></td><td><code>number</code>&#x2F;<code>Array</code></td><td>图例的边框圆角，可以是单个值或数组（分别表示左上、右上、右下、左下的圆角半径）。</td></tr><tr><td><code>shadowBlur</code></td><td><code>number</code></td><td>图例的阴影模糊大小。</td></tr><tr><td><code>shadowColor</code></td><td><code>string</code></td><td>图例的阴影颜色。</td></tr><tr><td><code>shadowOffsetX</code></td><td><code>number</code></td><td>图例的阴影 X 偏移。</td></tr><tr><td><code>shadowOffsetY</code></td><td><code>number</code></td><td>图例的阴影 Y 偏移。</td></tr><tr><td><code>formatter</code></td><td><code>Function</code>&#x2F;<code>string</code></td><td>用于格式化图例文本，支持字符串模板和回调函数。</td></tr><tr><td><code>selectedMode</code></td><td><code>boolean</code>&#x2F;<code>string</code></td><td>图例选择的模式，默认为 <code>true</code>。可选 <code>&#39;single&#39;</code> 或 <code>&#39;multiple&#39;</code>。</td></tr><tr><td><code>inactiveColor</code></td><td><code>string</code></td><td>图例关闭时的颜色。</td></tr><tr><td><code>tooltip</code></td><td><code>Object</code></td><td>图例的 tooltip 配置项。</td></tr></tbody></table><p>大部分配置项和<code>grid</code>是相似的。</p><img src="/2024/07/23/2024-07-23/%E5%9B%BE7.png" class title="图7"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在文章开头代码的基础上进行修改。</span><br><span class="hljs-comment">//首先将数据系列复制至5份。</span><br><span class="hljs-keyword">const</span> option = &#123;<br>  <span class="hljs-comment">//图例</span><br>  <span class="hljs-attr">legend</span>:&#123;<br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;grey&quot;</span>,<br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">fontSize</span>:<span class="hljs-number">20</span>,<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    &#125;,<br>    <br>    <span class="hljs-comment">//图例的配置项</span><br>    <span class="hljs-attr">orient</span>:<span class="hljs-string">&quot;horizontal&quot;</span>, <span class="hljs-comment">//水平或者垂直分布</span><br>    <span class="hljs-attr">padding</span>:<span class="hljs-number">10</span>,<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-comment">//滚动图例</span><br>    <span class="hljs-attr">left</span>:<span class="hljs-string">&quot;70%&quot;</span>,<br>    <span class="hljs-attr">align</span>:<span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-comment">//对齐方式</span><br>    <span class="hljs-attr">itemWidth</span>:<span class="hljs-number">50</span>, <span class="hljs-comment">//图例标记的样式修改。</span><br>    <span class="hljs-attr">itemHeight</span>:<span class="hljs-number">30</span>,<br>    <span class="hljs-attr">selected</span>:&#123; <span class="hljs-comment">//初始化哪些系列被选中。 </span><br>      <span class="hljs-string">&quot;line1&quot;</span>:<span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;line2&quot;</span>:<span class="hljs-literal">false</span>,<br>      <span class="hljs-string">&quot;line3&quot;</span>:<span class="hljs-literal">false</span>,<br>      <span class="hljs-string">&quot;line4&quot;</span>:<span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;line5&quot;</span>:<span class="hljs-literal">false</span>,<br>    &#125;,<br>    <span class="hljs-attr">selectedMode</span>:<span class="hljs-string">&quot;single&quot;</span>, <span class="hljs-comment">//single表示最多只能有一个被选中。</span><br>    <span class="hljs-attr">tooltip</span>:&#123; <span class="hljs-comment">//图例小型的提示框</span><br>      <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ECharts-Tooltip配置项"><a href="#ECharts-Tooltip配置项" class="headerlink" title="ECharts Tooltip配置项"></a>ECharts Tooltip配置项</h2><p><font color="yellow">ECharts Tooltip 配置项总结表：</font></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>show</code></td><td><code>boolean</code></td><td>是否显示 tooltip。</td></tr><tr><td><code>trigger</code></td><td><code>string</code></td><td>触发类型，支持 ‘item’（数据项触发）、’axis’（坐标轴触发）、’none’（不显示）。</td></tr><tr><td><code>triggerOn</code></td><td><code>string</code></td><td>触发条件，支持 ‘mousemove’（鼠标移动）、’click’（点击）、’mousemove</td></tr><tr><td><code>axisPointer</code></td><td><code>Object</code></td><td>坐标轴指示器配置项。</td></tr><tr><td><code>formatter</code></td><td><code>string</code>&#x2F;<code>Function</code></td><td>提示框内容格式器。可以是字符串模板或者回调函数。</td></tr><tr><td><code>backgroundColor</code></td><td><code>string</code>&#x2F;<code>Object</code></td><td>提示框的背景颜色。</td></tr><tr><td><code>borderColor</code></td><td><code>string</code></td><td>提示框的边框颜色。</td></tr><tr><td><code>borderWidth</code></td><td><code>number</code></td><td>提示框的边框宽度。</td></tr><tr><td><code>padding</code></td><td><code>number</code>&#x2F;<code>Array</code></td><td>提示框的内边距。</td></tr><tr><td><code>textStyle</code></td><td><code>Object</code></td><td>提示框的文字样式配置项，包括颜色、字体大小、字体粗细等。</td></tr><tr><td><code>extraCssText</code></td><td><code>string</code></td><td>自定义的 CSS 样式，支持全局 CSS 属性。</td></tr><tr><td><code>transitionDuration</code></td><td><code>number</code></td><td>动画过渡时间，单位为秒。</td></tr><tr><td><code>confine</code></td><td><code>boolean</code></td><td>是否将提示框限制在图表区域内。</td></tr><tr><td><code>enterable</code></td><td><code>boolean</code></td><td>是否允许鼠标进入 tooltip 区域。</td></tr><tr><td><code>showContent</code></td><td><code>boolean</code></td><td>是否显示 tooltip 内容。</td></tr></tbody></table><p>根据<a href="https://cxdlogver.github.io/2024/07/22/2024-07-22/"><strong>ECharts使用（1)</strong></a>中的第一个例子，我们只要理解<code>tooltip</code>提示框和<code>axisPointer</code>轴标签指示器在图表中位置，就很好理解配置项的内容。</p><p><code>tooltip</code>是一个指示框，用于显示坐标轴某一个点的坐标信息。根据<code>trigger</code>有两种触发模式。</p><ul><li><code>item</code>数据项触发：当鼠标指到数据系列的数据项时，才出现提示框，并给出数据点信息。</li><li><code>axis</code>坐标轴触发：当鼠标指在坐标轴的任意一个位置时，都会出现提示框，给出与鼠标当前位置最近的所有数据项信息。</li></ul><p><code>triggerOn</code>触发条件，<code>click</code>表示只有点击时才出现提示框，<code>mousemove</code>鼠标移到时就出现提示框。默认是<code>mousemove</code>。</p><p><code>tooltip</code>是一个文本框，因此相关的渲染以及<code>textStyle</code>配置都有，用于样式的配置。</p><p><code>axisPointer</code>是呈现在坐标轴上的轴标签指示器，声明它则<code>tooltip</code>默认<code>trigger:axis</code>。它作为标签，有<code>label</code>配置，在<code>label</code>中有标签的相关的渲染以及<code>textStyle</code>配置，和legend等元素类似。因此渲染不再做介绍。</p><p><code>axisPointer</code>的触发类型<code>type</code>有三种：</p><ul><li><code>line</code>：只有一条垂直于X轴的线。</li><li><code>cross</code>：有两条相互垂直的线。</li><li><code>shadow</code>:用一块阴影矩形代替垂直于X轴的线。</li></ul><img src="/2024/07/23/2024-07-23/%E5%9B%BE8.png" class title="图8"><p><font color="yellow">对应的有<code>crossStyle</code>、<code>lineStyle</code>、<code>shadowStyle</code>配置项进行渲染。</font></p>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>EChars</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端学习-ECharts使用（1）</title>
    <link href="/2024/07/22/2024-07-22/"/>
    <url>/2024/07/22/2024-07-22/</url>
    
    <content type="html"><![CDATA[<p>文章介绍ECharts图表构建的一个基本结构；Option的配置项汇总和常用的配置项用法；图表的基础样式配置；Option更新方式。</p><span id="more"></span><h1 id="前端学习-ECharts使用（1）"><a href="#前端学习-ECharts使用（1）" class="headerlink" title="前端学习-ECharts使用（1）"></a>前端学习-ECharts使用（1）</h1><blockquote><p>个人学习总结，可能存在错误。</p></blockquote><hr><p>学习和使用ECharts，我们直接通过学习官网的**<font color="#008B8B">示例代码</font>**，结合<font color="#008B8B"><strong>API文档</strong></font>，通过分析和修改示例代码，实时观察图表样式来熟悉ECharts的配置项使用。</p><blockquote><p><a href="https://echarts.apache.org/zh/index.html"><strong><u>ECharts官网</u></strong></a></p></blockquote><p>通常我们直接在官网编辑<a href="https://echarts.apache.org/examples/zh/editor.html?c=line-simple%EF%BC%8C%E5%BE%97%E5%88%B0%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%88%E6%9E%9C%E4%BB%A5%E5%90%8E%E5%9C%A8%E5%A4%8D%E5%88%B6%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%AD%E3%80%82">https://echarts.apache.org/examples/zh/editor.html?c=line-simple，得到我们需要的效果以后在复制到我们的程序中。</a></p><h2 id="ECharts基本结构"><a href="#ECharts基本结构" class="headerlink" title="ECharts基本结构"></a>ECharts基本结构</h2><p>npm安装echarts依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install echarts<br></code></pre></td></tr></table></figure><p><strong>基本结构如下：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> //声明容器<br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> myCharts = <span class="hljs-keyword">new</span> echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>)); <span class="hljs-comment">//初始化图表到容器中</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> option = &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//定义配置项，包括横坐标，纵坐标，数据集，图例等等</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    myCharts.<span class="hljs-title function_">setOption</span>(option) <span class="hljs-comment">//引入配置项。</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="yellow">由此可见，ECharts的所有学习几乎都放在option配置项的设置。</font></p><h2 id="ECharts-Option-常用配置项表"><a href="#ECharts-Option-常用配置项表" class="headerlink" title="ECharts Option 常用配置项表"></a>ECharts Option 常用配置项表</h2><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td><code>Object</code></td><td>图表标题配置项，包括主标题和副标题。</td></tr><tr><td><code>legend</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>图例组件配置项，用于展示不同系列的标识。</td></tr><tr><td><code>tooltip</code></td><td><code>Object</code></td><td>提示框组件配置项。</td></tr><tr><td><code>grid</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>直角坐标系内绘图网格配置项。</td></tr><tr><td><code>xAxis</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>X 轴配置项，可以是单个对象或对象数组，数组用于多 X 轴场景。</td></tr><tr><td><code>yAxis</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>Y 轴配置项，可以是单个对象或对象数组，数组用于多 Y 轴场景。</td></tr><tr><td><code>polar</code></td><td><code>Object</code></td><td>极坐标系配置项。</td></tr><tr><td><code>radiusAxis</code></td><td><code>Object</code></td><td>半径轴配置项，适用于极坐标系。</td></tr><tr><td><code>angleAxis</code></td><td><code>Object</code></td><td>角度轴配置项，适用于极坐标系。</td></tr><tr><td><code>radar</code></td><td><code>Object</code></td><td>雷达图坐标系配置项。</td></tr><tr><td><code>dataZoom</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>数据区域缩放组件配置项。</td></tr><tr><td><code>visualMap</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>视觉映射组件配置项，用于进行数据映射。</td></tr><tr><td><code>series</code></td><td><code>Array</code></td><td>系列列表，每个系列通过配置项表示数据和图表类型。</td></tr><tr><td><code>color</code></td><td><code>Array</code></td><td>调色盘颜色列表。</td></tr><tr><td><code>backgroundColor</code></td><td><code>string</code></td><td>图表的背景色。</td></tr><tr><td><code>textStyle</code></td><td><code>Object</code></td><td>全局字体样式配置项。</td></tr><tr><td><code>animation</code></td><td><code>boolean</code></td><td>是否开启动画。</td></tr><tr><td><code>animationDuration</code></td><td><code>number</code></td><td>初始动画时长。</td></tr><tr><td><code>animationEasing</code></td><td><code>string</code></td><td>初始动画缓动效果。</td></tr><tr><td><code>animationDelay</code></td><td><code>number</code>&#x2F;<code>Function</code></td><td>初始动画延迟。</td></tr><tr><td><code>toolbox</code></td><td><code>Object</code></td><td>工具栏配置项，包括数据视图、还原、保存图片等功能。</td></tr><tr><td><code>geo</code></td><td><code>Object</code></td><td>地理坐标系组件配置项。</td></tr><tr><td><code>parallel</code></td><td><code>Object</code></td><td>平行坐标系组件配置项。</td></tr><tr><td><code>parallelAxis</code></td><td><code>Object</code></td><td>平行坐标系的坐标轴配置项。</td></tr><tr><td><code>calendar</code></td><td><code>Object</code></td><td>日历坐标系配置项。</td></tr><tr><td><code>dataset</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>数据集配置项。</td></tr><tr><td><code>graphic</code></td><td><code>Object</code>&#x2F;<code>Array</code></td><td>图形元素配置项。</td></tr><tr><td><code>brush</code></td><td><code>Object</code></td><td>刷子组件配置项，用于区域选择。</td></tr><tr><td><code>aria</code></td><td><code>Object</code></td><td>无障碍访问配置项。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> dataY1 = []<br><span class="hljs-keyword">let</span> dataY2 = []<br><span class="hljs-keyword">let</span> dataX1 = []<br><span class="hljs-keyword">let</span> dataX2 = []<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">50</span>; i++)&#123;<br>  dataY1.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>  dataY2.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>  dataX1.<span class="hljs-title function_">push</span>((i+<span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())<br>  dataX2.<span class="hljs-title function_">push</span>(<span class="hljs-number">100</span>+i)<br>&#125;<br><br><span class="hljs-keyword">const</span> option = &#123;<br>    <span class="hljs-comment">//全局配置</span><br>  <span class="hljs-attr">textStyle</span>:&#123;<br>    <span class="hljs-attr">fontFamily</span>:<span class="hljs-string">&quot;华文中宋&quot;</span>, <span class="hljs-comment">//全局字体样式</span><br>    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-comment">//全局颜色配置</span><br>  &#125;<br>    <br>    <span class="hljs-comment">//标题框</span><br>    <span class="hljs-attr">title</span>:&#123; <br>        <span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;Chart&#x27;</span>, <span class="hljs-comment">//主标题</span><br>        <span class="hljs-attr">subtext</span>: <span class="hljs-string">&#x27;-- by Xiang&#x27;</span>, <span class="hljs-comment">//副标题</span><br>        <span class="hljs-attr">textStyle</span>:&#123; <span class="hljs-comment">// 主标题框样式</span><br>            <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-comment">//前景颜色</span><br>        &#125;,<br>        <span class="hljs-attr">subtextStyle</span>:&#123; <span class="hljs-comment">//副标题框样式</span><br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;aqua&quot;</span>,<br>    &#125;,<br>        <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;grey&#x27;</span>, <span class="hljs-comment">//标题框背景色</span><br>        <span class="hljs-attr">borderWidth</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-comment">//边框大小</span><br>    &#125;,<br>     <br>    <span class="hljs-comment">//横坐标</span><br>  <span class="hljs-attr">xAxis</span>:[<br>    <span class="hljs-comment">//横坐标1</span><br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-comment">//坐标标签类型为类别</span><br>      <span class="hljs-attr">data</span>:dataX, <span class="hljs-comment">//标签类别数据</span><br>            <span class="hljs-attr">axisLabel</span>:&#123;<br>        <span class="hljs-attr">textStyle</span>:&#123;<br>          <span class="hljs-attr">fontFamily</span>:<span class="hljs-string">&quot;华文中宋&quot;</span>,<br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">//横坐标2</span><br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-comment">//标签类型为数值</span><br>      <span class="hljs-attr">data</span>:dataX2<br>    &#125;,<br>  ],<br> <br>  <span class="hljs-comment">//纵坐标</span><br>  <span class="hljs-attr">yAxis</span>:[<br>    <span class="hljs-comment">//纵坐标1</span><br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>      <span class="hljs-attr">data</span>:dataY1,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>      <span class="hljs-attr">data</span>:dataY2,<br>    &#125;<br>  ]<br>    <br>    <span class="hljs-comment">//数据系列</span><br>  <span class="hljs-attr">series</span>:[<br>    &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;line&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;line&quot;</span>, <span class="hljs-comment">//折线图</span><br>      <span class="hljs-attr">data</span>:dataY1, <span class="hljs-comment">//数据系列</span><br>      <span class="hljs-attr">xAxisIndex</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//选择第0个x数据轴</span><br>      <span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//选择第0个y数据轴</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;bar&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-comment">//柱形图</span><br>      <span class="hljs-attr">data</span>:dataY2, <span class="hljs-comment">//数据系列</span><br>      <span class="hljs-attr">xAxisIndex</span>:<span class="hljs-number">1</span>, <span class="hljs-comment">//选择第1个x数据轴</span><br>      <span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">1</span>, <span class="hljs-comment">//选择第1个y数据轴</span><br>    &#125;<br>  ],<br>  <br>  <span class="hljs-comment">//提示框</span><br>  <span class="hljs-attr">tooltip</span>:&#123;<br>    <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;axis&quot;</span>, <span class="hljs-comment">//坐标轴每个点都显示提示框</span><br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-comment">//提示框背景色</span><br>    <span class="hljs-attr">borderWidth</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-comment">//边框宽度</span><br>    <span class="hljs-attr">borderColor</span>:<span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-comment">//边框颜色</span><br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">axisPointer</span>:&#123; <span class="hljs-comment">//坐标轴指示器</span><br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;cross&quot;</span>, <span class="hljs-comment">//显示方式，两条线交叉</span><br>      <span class="hljs-attr">label</span>:&#123;<br>        <span class="hljs-attr">textStyle</span>:&#123;<br>          <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <br>  <span class="hljs-comment">//图例框</span><br>  <span class="hljs-attr">legend</span>:&#123;<br>    <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//默认为显示</span><br>    <span class="hljs-attr">data</span>:[<span class="hljs-string">&quot;line&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>], <span class="hljs-comment">//默认所有系列都显示</span><br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;grey&quot;</span>,<br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>图表效果如下：</p><img src="/2024/07/22/2024-07-22/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E4%BE%8B.png" class title="图表示例"><p><font color="yellow">通常纵坐标类型为<code>value</code>，即具体的值。而横坐标用<code>category</code>类型</font>，横坐标不指定则默认是<code>[1,2,3,……]</code>。如果横坐标用<code>value</code>，只能在series中通过二维数值的形式传递<code>[[x1,y1],[x2,y2]]</code>。如果是一维数值则默认为<code>[[x1,x1],[x2,x2]]</code>。</p><h2 id="ECharts中的样式配置"><a href="#ECharts中的样式配置" class="headerlink" title="ECharts中的样式配置"></a>ECharts中的样式配置</h2><p>任何设计都会包括背景颜色、前景颜色、字体大小等样式的配置。在ECharts中，样式配置主要在以下几个地方。</p><ol><li><font color="yellow">直接在组件下配置</font>：例如option的全局配置、tooltip提示框下的<code>backgroundColor</code>配置等。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> option = &#123;<br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-attr">borderColor</span>:<span class="hljs-string">&quot;white&quot;</span>,<br>    <span class="hljs-attr">tooltip</span>:&#123;<br>        <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>        <span class="hljs-attr">borderWidth</span>:<span class="hljs-number">2</span>，<br>        <span class="hljs-attr">borderCOlor</span>:<span class="hljs-string">&quot;white&quot;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><font color="yellow">在<code>textStyle</code>下配置</font>：如果组件中可以有文本，通常会有<code>textStyle</code>配置项，如option全局配置、legend、xAxis中的axisLabel以及tooltip中的axisPointer等。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">xAxis</span>:[<br>  &#123;<br>     <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>, <br>     <span class="hljs-attr">data</span>:dataX, <br>         <span class="hljs-attr">axisLabel</span>:&#123;<br>        <span class="hljs-attr">textStyle</span>:&#123;<br>          <span class="hljs-attr">fontFamily</span>:<span class="hljs-string">&quot;华文中宋&quot;</span>,<br>        &#125;<br>      &#125;<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ol start="3"><li><font color="yellow">在特定Style配置下</font>：如果组件不是文本框一类的。通常会有对应的配置项。例如：<ul><li><code>subtext</code>有<code>subtextStyle</code>配置项。</li><li><code>serise</code>中折线图有<code>lineStyle</code>配置项，数据点有<code>itemStyle</code>数据项，面积图有<code>areaStyle</code>数据项。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">series</span>:[ <span class="hljs-comment">//修改上述的折线图配置</span><br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;line&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;line&quot;</span>, <span class="hljs-comment">//折线图</span><br>      <span class="hljs-attr">data</span>:dataY1, <span class="hljs-comment">//数据系列</span><br>      <span class="hljs-attr">xAxisIndex</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//选择第0个x数据轴</span><br>      <span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//选择第0个y数据轴</span><br>      <span class="hljs-attr">areaStyle</span>:&#123;<br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;green&quot;</span> <br>      &#125;,<br>      <span class="hljs-attr">lineStyle</span>:&#123;<br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">itemStyle</span>:&#123;<br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span><br>      &#125;<br>]<br></code></pre></td></tr></table></figure><p>得到的效果图如下：</p><img src="/2024/07/22/2024-07-22/%E5%9B%BE2.png" class title="图2"><h2 id="ECharts-Option更新"><a href="#ECharts-Option更新" class="headerlink" title="ECharts Option更新"></a>ECharts Option更新</h2><p>在 ECharts 中，更新图表时只需要更新option配置项，然后引入到ECharts中，不过在ECharts中不需要重新传入所有的 option 配置项，只需传入需要修改的部分配置即可。这是<font color="yellow">因为 setOption 方法默认会进行合并操作（merge），即只更新传入的配置项，而保持其他配置项不变</font>。</p><p>我们通过<font color="yellow">JS中的<code>setInterval()</code>函数</font>设置一个定时器，定时更新图表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  dataX1.<span class="hljs-title function_">push</span>((count+<span class="hljs-number">20</span>).<span class="hljs-title function_">toString</span>())<br>  dataX2.<span class="hljs-title function_">push</span>((count+<span class="hljs-number">120</span>).<span class="hljs-title function_">toString</span>())<br>  dataY1.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>  dataY2.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()); <span class="hljs-comment">//每一秒更新数据系列，队尾加入新的数据，队首去掉一个数据</span><br>  <span class="hljs-keyword">if</span>(++count&gt;<span class="hljs-number">20</span>)&#123;<br>    <span class="hljs-title function_">cleanInterval</span>(id)<br>  &#125;<br>  myChart.<span class="hljs-title function_">setOption</span>(&#123; <span class="hljs-comment">//只需要将更新的数据传进去。</span><br>      <span class="hljs-attr">xAxis</span>:[<br>        &#123;<span class="hljs-attr">data</span>:dataX1&#125;,<br>        &#123;<span class="hljs-attr">data</span>:dataX2&#125;<br>        ],<br>    <span class="hljs-attr">series</span>:[<br>        &#123;<br>          <span class="hljs-attr">data</span>:dataY1,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">data</span>:dataY2,<br>        &#125;<br>      ]<br>  &#125;);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>动图效果如下：</p><img src="/2024/07/22/2024-07-22/%E5%9B%BE3.gif" class title="图3"><p>完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> dataY1 = []<br><span class="hljs-keyword">let</span> dataY2 = []<br><span class="hljs-keyword">let</span> dataX1 = []<br><span class="hljs-keyword">let</span> dataX2 = []<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">20</span>; i++)&#123;<br>  dataY1.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>  dataY2.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>  dataX1.<span class="hljs-title function_">push</span>((i+<span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>())<br>  dataX2.<span class="hljs-title function_">push</span>((<span class="hljs-number">100</span>+i).<span class="hljs-title function_">toString</span>())<br>&#125;<br><br>option = &#123;<br>  <span class="hljs-comment">//标题框</span><br>  title :&#123;<br>    <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;Chart&quot;</span>,<br>    <span class="hljs-attr">subtext</span>:<span class="hljs-string">&quot;-- by xiang&quot;</span>,<br>    textStyle : &#123;<br>      color : <span class="hljs-string">&#x27;yellow&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">subtextStyle</span>:&#123;<br>      color : <span class="hljs-string">&#x27;aqua&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;grey&quot;</span>,<br>    <span class="hljs-attr">borderWidth</span>:<span class="hljs-string">&quot;2&quot;</span>,<br>  &#125;,<br>  <br>  <span class="hljs-comment">//横坐标</span><br>  <span class="hljs-attr">xAxis</span>:[<br>    <span class="hljs-comment">//横坐标1</span><br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-comment">//坐标标签类型为类别</span><br>      <span class="hljs-attr">data</span>:dataX1, <span class="hljs-comment">//标签类别数据</span><br>    &#125;,<br>    <span class="hljs-comment">//横坐标2</span><br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-comment">//标签类型为数值</span><br>      <span class="hljs-attr">data</span>:dataX2,<br>    &#125;,<br>  ],<br>  <br>  <span class="hljs-comment">//纵坐标</span><br>  <span class="hljs-attr">yAxis</span>:[<br>    <span class="hljs-comment">//纵坐标1</span><br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>      <span class="hljs-attr">data</span>:dataY1,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span>,<br>      <span class="hljs-attr">data</span>:dataY2,<br>    &#125;<br>  ],<br>  <br>  <span class="hljs-comment">//数据系列</span><br>  <span class="hljs-attr">series</span>:[<br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;line&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;line&quot;</span>, <span class="hljs-comment">//折线图</span><br>      <span class="hljs-attr">data</span>:dataY1, <span class="hljs-comment">//数据系列</span><br>      <span class="hljs-attr">xAxisIndex</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//选择第0个x数据轴</span><br>      <span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//选择第0个y数据轴</span><br>      <span class="hljs-comment">// areaStyle:&#123;</span><br>      <span class="hljs-comment">//   color:&quot;green&quot;</span><br>      <span class="hljs-comment">// &#125;,</span><br>      <span class="hljs-comment">// lineStyle:&#123;</span><br>      <span class="hljs-comment">//   color:&quot;red&quot;</span><br>      <span class="hljs-comment">// &#125;,</span><br>      <span class="hljs-comment">// itemStyle:&#123;</span><br>      <span class="hljs-comment">//   color:&quot;yellow&quot;</span><br>      <span class="hljs-comment">// &#125;</span><br>      <br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;bar&quot;</span>,<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-comment">//柱形图</span><br>      <span class="hljs-attr">data</span>:dataY2, <span class="hljs-comment">//数据系列</span><br>      <span class="hljs-attr">xAxisIndex</span>:<span class="hljs-number">1</span>, <span class="hljs-comment">//选择第1个x数据轴</span><br>      <span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">1</span>, <span class="hljs-comment">//选择第1个y数据轴</span><br>      <span class="hljs-attr">show</span>:<span class="hljs-literal">false</span>,<br>    &#125;<br>  ],<br>  <br>  <span class="hljs-comment">//提示框</span><br>  <span class="hljs-attr">tooltip</span>:&#123;<br>    <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;axis&quot;</span>, <span class="hljs-comment">//坐标轴每个点都显示提示框</span><br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-comment">//提示框背景色</span><br>    <span class="hljs-attr">borderWidth</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-comment">//边框宽度</span><br>    <span class="hljs-attr">borderColor</span>:<span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-comment">//边框颜色</span><br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">axisPointer</span>:&#123; <span class="hljs-comment">//坐标轴指示器</span><br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;cross&quot;</span>, <span class="hljs-comment">//显示方式，两条线交叉</span><br>      <span class="hljs-attr">label</span>:&#123;<br>        <span class="hljs-attr">textStyle</span>:&#123;<br>          <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <br>  <span class="hljs-comment">//图例框</span><br>  <span class="hljs-attr">legend</span>:&#123;<br>    <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">data</span>:[<span class="hljs-string">&quot;line&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>],<br>    <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;grey&quot;</span>,<br>    <span class="hljs-attr">textStyle</span>:&#123;<br>      <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<br>    &#125;<br>  &#125;,<br>  <br>  <span class="hljs-comment">//全局配置</span><br>  <span class="hljs-attr">textStyle</span>:&#123;<br>    <span class="hljs-attr">fontFamily</span>:<span class="hljs-string">&quot;华文中宋&quot;</span>,<br>    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>,<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <br>  dataX1.<span class="hljs-title function_">push</span>((count+<span class="hljs-number">20</span>).<span class="hljs-title function_">toString</span>())<br>  dataX2.<span class="hljs-title function_">push</span>((count+<span class="hljs-number">120</span>).<span class="hljs-title function_">toString</span>())<br>  dataY1.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>  dataY2.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>  <span class="hljs-keyword">if</span>(++count&gt;<span class="hljs-number">20</span>)&#123;<br>    <span class="hljs-title function_">cleanInterval</span>(id)<br>  &#125;<br>  myChart.<span class="hljs-title function_">setOption</span>(&#123;<br>          <span class="hljs-attr">xAxis</span>:[<br>        &#123;<span class="hljs-attr">data</span>:dataX1&#125;,<br>        &#123;<span class="hljs-attr">data</span>:dataX2&#125;<br>        ],<br>    <span class="hljs-attr">series</span>:[<br>        &#123;<br>          <span class="hljs-attr">data</span>:dataY1,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">data</span>:dataY2,<br>        &#125;<br>      ]<br>  &#125;);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每日总结</tag>
      
      <tag>EChars</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
